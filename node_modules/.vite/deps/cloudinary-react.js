import {
  require_SetCache,
  require_Stack,
  require_arrayFilter,
  require_arrayIncludes,
  require_arrayIncludesWith,
  require_arrayMap,
  require_assignValue,
  require_baseAssignValue,
  require_baseClone,
  require_baseFlatten,
  require_baseFor,
  require_baseIndexOf,
  require_baseRest,
  require_baseToString,
  require_baseTrim,
  require_baseUnary,
  require_cacheHas,
  require_castSlice,
  require_cloneBuffer,
  require_cloneTypedArray,
  require_copyArray,
  require_copyObject,
  require_eq,
  require_identity,
  require_initCloneObject,
  require_isArguments,
  require_isArray,
  require_isArrayLike,
  require_isBuffer,
  require_isFunction,
  require_isIterateeCall,
  require_isObject,
  require_isObjectLike,
  require_isPlainObject,
  require_isPrototype,
  require_isString,
  require_isTypedArray,
  require_keys,
  require_keysIn,
  require_prop_types,
  require_stringToArray,
  require_toInteger,
  require_toString
} from "./chunk-SMSLG47E.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __commonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/assign.js
var require_assign = __commonJS({
  "node_modules/lodash/assign.js"(exports, module) {
    var assignValue = require_assignValue();
    var copyObject = require_copyObject();
    var createAssigner = require_createAssigner();
    var isArrayLike = require_isArrayLike();
    var isPrototype = require_isPrototype();
    var keys = require_keys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });
    module.exports = assign;
  }
});

// node_modules/lodash/cloneDeep.js
var require_cloneDeep = __commonJS({
  "node_modules/lodash/cloneDeep.js"(exports, module) {
    var baseClone = require_baseClone();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_SYMBOLS_FLAG = 4;
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }
    module.exports = cloneDeep;
  }
});

// node_modules/lodash/compact.js
var require_compact = __commonJS({
  "node_modules/lodash/compact.js"(exports, module) {
    function compact(array) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = compact;
  }
});

// node_modules/lodash/_baseDifference.js
var require_baseDifference = __commonJS({
  "node_modules/lodash/_baseDifference.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var arrayMap = require_arrayMap();
    var baseUnary = require_baseUnary();
    var cacheHas = require_cacheHas();
    var LARGE_ARRAY_SIZE = 200;
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseDifference;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/difference.js
var require_difference = __commonJS({
  "node_modules/lodash/difference.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseFlatten = require_baseFlatten();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });
    module.exports = difference;
  }
});

// node_modules/lodash/_baseFunctions.js
var require_baseFunctions = __commonJS({
  "node_modules/lodash/_baseFunctions.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var isFunction = require_isFunction();
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }
    module.exports = baseFunctions;
  }
});

// node_modules/lodash/functions.js
var require_functions = __commonJS({
  "node_modules/lodash/functions.js"(exports, module) {
    var baseFunctions = require_baseFunctions();
    var keys = require_keys();
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }
    module.exports = functions;
  }
});

// node_modules/lodash/_baseValues.js
var require_baseValues = __commonJS({
  "node_modules/lodash/_baseValues.js"(exports, module) {
    var arrayMap = require_arrayMap();
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    module.exports = baseValues;
  }
});

// node_modules/lodash/values.js
var require_values = __commonJS({
  "node_modules/lodash/values.js"(exports, module) {
    var baseValues = require_baseValues();
    var keys = require_keys();
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }
    module.exports = values;
  }
});

// node_modules/lodash/includes.js
var require_includes = __commonJS({
  "node_modules/lodash/includes.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    var isArrayLike = require_isArrayLike();
    var isString = require_isString();
    var toInteger = require_toInteger();
    var values = require_values();
    var nativeMax = Math.max;
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }
    module.exports = includes;
  }
});

// node_modules/lodash/isElement.js
var require_isElement = __commonJS({
  "node_modules/lodash/isElement.js"(exports, module) {
    var isObjectLike = require_isObjectLike();
    var isPlainObject = require_isPlainObject();
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }
    module.exports = isElement;
  }
});

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction = require_isFunction();
    var isObject = require_isObject();
    var isPlainObject = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge;
  }
});

// node_modules/lodash/_charsEndIndex.js
var require_charsEndIndex = __commonJS({
  "node_modules/lodash/_charsEndIndex.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;
      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
      }
      return index;
    }
    module.exports = charsEndIndex;
  }
});

// node_modules/lodash/_charsStartIndex.js
var require_charsStartIndex = __commonJS({
  "node_modules/lodash/_charsStartIndex.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1, length = strSymbols.length;
      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
      }
      return index;
    }
    module.exports = charsStartIndex;
  }
});

// node_modules/lodash/trim.js
var require_trim = __commonJS({
  "node_modules/lodash/trim.js"(exports, module) {
    var baseToString = require_baseToString();
    var baseTrim = require_baseTrim();
    var castSlice = require_castSlice();
    var charsEndIndex = require_charsEndIndex();
    var charsStartIndex = require_charsStartIndex();
    var stringToArray = require_stringToArray();
    var toString = require_toString();
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === void 0)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
      return castSlice(strSymbols, start, end).join("");
    }
    module.exports = trim;
  }
});

// node_modules/cloudinary-core/cloudinary-core.js
var require_cloudinary_core = __commonJS({
  "node_modules/cloudinary-core/cloudinary-core.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_assign(), require_cloneDeep(), require_compact(), require_difference(), require_functions(), require_identity(), require_includes(), require_isArray(), require_isElement(), require_isFunction(), require_isPlainObject(), require_isString(), require_merge(), require_trim());
      else if (typeof define === "function" && define.amd)
        define(["lodash/assign", "lodash/cloneDeep", "lodash/compact", "lodash/difference", "lodash/functions", "lodash/identity", "lodash/includes", "lodash/isArray", "lodash/isElement", "lodash/isFunction", "lodash/isPlainObject", "lodash/isString", "lodash/merge", "lodash/trim"], factory);
      else if (typeof exports === "object")
        exports["cloudinary"] = factory(require_assign(), require_cloneDeep(), require_compact(), require_difference(), require_functions(), require_identity(), require_includes(), require_isArray(), require_isElement(), require_isFunction(), require_isPlainObject(), require_isString(), require_merge(), require_trim());
      else
        root["cloudinary"] = factory(root["_"]["assign"], root["_"]["cloneDeep"], root["_"]["compact"], root["_"]["difference"], root["_"]["functions"], root["_"]["identity"], root["_"]["includes"], root["_"]["isArray"], root["_"]["isElement"], root["_"]["isFunction"], root["_"]["isPlainObject"], root["_"]["isString"], root["_"]["merge"], root["_"]["trim"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE_lodash_assign__, __WEBPACK_EXTERNAL_MODULE_lodash_cloneDeep__, __WEBPACK_EXTERNAL_MODULE_lodash_compact__, __WEBPACK_EXTERNAL_MODULE_lodash_difference__, __WEBPACK_EXTERNAL_MODULE_lodash_functions__, __WEBPACK_EXTERNAL_MODULE_lodash_identity__, __WEBPACK_EXTERNAL_MODULE_lodash_includes__, __WEBPACK_EXTERNAL_MODULE_lodash_isArray__, __WEBPACK_EXTERNAL_MODULE_lodash_isElement__, __WEBPACK_EXTERNAL_MODULE_lodash_isFunction__, __WEBPACK_EXTERNAL_MODULE_lodash_isPlainObject__, __WEBPACK_EXTERNAL_MODULE_lodash_isString__, __WEBPACK_EXTERNAL_MODULE_lodash_merge__, __WEBPACK_EXTERNAL_MODULE_lodash_trim__) {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, { enumerable: true, get: getter });
            }
          };
          __webpack_require__.r = function(exports2) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
              Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
            }
            Object.defineProperty(exports2, "__esModule", { value: true });
          };
          __webpack_require__.t = function(value, mode) {
            if (mode & 1)
              value = __webpack_require__(value);
            if (mode & 8)
              return value;
            if (mode & 4 && typeof value === "object" && value && value.__esModule)
              return value;
            var ns = /* @__PURE__ */ Object.create(null);
            __webpack_require__.r(ns);
            Object.defineProperty(ns, "default", { enumerable: true, value });
            if (mode & 2 && typeof value != "string")
              for (var key in value)
                __webpack_require__.d(ns, key, (function(key2) {
                  return value[key2];
                }).bind(null, key));
            return ns;
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = "./src/namespace/cloudinary-core.js");
        }({
          /***/
          "./src/namespace/cloudinary-core.js": (
            /***/
            function(module2, __webpack_exports__, __webpack_require__) {
              "use strict";
              __webpack_require__.r(__webpack_exports__);
              __webpack_require__.d(__webpack_exports__, "ClientHintsMetaTag", function() {
                return (
                  /* reexport */
                  clienthintsmetatag
                );
              });
              __webpack_require__.d(__webpack_exports__, "Cloudinary", function() {
                return (
                  /* reexport */
                  cloudinary
                );
              });
              __webpack_require__.d(__webpack_exports__, "Condition", function() {
                return (
                  /* reexport */
                  condition
                );
              });
              __webpack_require__.d(__webpack_exports__, "Configuration", function() {
                return (
                  /* reexport */
                  src_configuration
                );
              });
              __webpack_require__.d(__webpack_exports__, "crc32", function() {
                return (
                  /* reexport */
                  src_crc32
                );
              });
              __webpack_require__.d(__webpack_exports__, "Expression", function() {
                return (
                  /* reexport */
                  expression
                );
              });
              __webpack_require__.d(__webpack_exports__, "FetchLayer", function() {
                return (
                  /* reexport */
                  fetchlayer
                );
              });
              __webpack_require__.d(__webpack_exports__, "HtmlTag", function() {
                return (
                  /* reexport */
                  htmltag
                );
              });
              __webpack_require__.d(__webpack_exports__, "ImageTag", function() {
                return (
                  /* reexport */
                  imagetag
                );
              });
              __webpack_require__.d(__webpack_exports__, "Layer", function() {
                return (
                  /* reexport */
                  layer_layer
                );
              });
              __webpack_require__.d(__webpack_exports__, "PictureTag", function() {
                return (
                  /* reexport */
                  picturetag
                );
              });
              __webpack_require__.d(__webpack_exports__, "SubtitlesLayer", function() {
                return (
                  /* reexport */
                  subtitleslayer
                );
              });
              __webpack_require__.d(__webpack_exports__, "TextLayer", function() {
                return (
                  /* reexport */
                  textlayer
                );
              });
              __webpack_require__.d(__webpack_exports__, "Transformation", function() {
                return (
                  /* reexport */
                  src_transformation
                );
              });
              __webpack_require__.d(__webpack_exports__, "utf8_encode", function() {
                return (
                  /* reexport */
                  src_utf8_encode
                );
              });
              __webpack_require__.d(__webpack_exports__, "Util", function() {
                return (
                  /* reexport */
                  lodash_namespaceObject
                );
              });
              __webpack_require__.d(__webpack_exports__, "VideoTag", function() {
                return (
                  /* reexport */
                  videotag
                );
              });
              var constants_namespaceObject = {};
              __webpack_require__.r(constants_namespaceObject);
              __webpack_require__.d(constants_namespaceObject, "VERSION", function() {
                return VERSION;
              });
              __webpack_require__.d(constants_namespaceObject, "CF_SHARED_CDN", function() {
                return CF_SHARED_CDN;
              });
              __webpack_require__.d(constants_namespaceObject, "OLD_AKAMAI_SHARED_CDN", function() {
                return OLD_AKAMAI_SHARED_CDN;
              });
              __webpack_require__.d(constants_namespaceObject, "AKAMAI_SHARED_CDN", function() {
                return AKAMAI_SHARED_CDN;
              });
              __webpack_require__.d(constants_namespaceObject, "SHARED_CDN", function() {
                return SHARED_CDN;
              });
              __webpack_require__.d(constants_namespaceObject, "DEFAULT_TIMEOUT_MS", function() {
                return DEFAULT_TIMEOUT_MS;
              });
              __webpack_require__.d(constants_namespaceObject, "DEFAULT_POSTER_OPTIONS", function() {
                return DEFAULT_POSTER_OPTIONS;
              });
              __webpack_require__.d(constants_namespaceObject, "DEFAULT_VIDEO_SOURCE_TYPES", function() {
                return DEFAULT_VIDEO_SOURCE_TYPES;
              });
              __webpack_require__.d(constants_namespaceObject, "SEO_TYPES", function() {
                return SEO_TYPES;
              });
              __webpack_require__.d(constants_namespaceObject, "DEFAULT_IMAGE_PARAMS", function() {
                return DEFAULT_IMAGE_PARAMS;
              });
              __webpack_require__.d(constants_namespaceObject, "DEFAULT_VIDEO_PARAMS", function() {
                return DEFAULT_VIDEO_PARAMS;
              });
              __webpack_require__.d(constants_namespaceObject, "DEFAULT_VIDEO_SOURCES", function() {
                return DEFAULT_VIDEO_SOURCES;
              });
              __webpack_require__.d(constants_namespaceObject, "DEFAULT_EXTERNAL_LIBRARIES", function() {
                return DEFAULT_EXTERNAL_LIBRARIES;
              });
              __webpack_require__.d(constants_namespaceObject, "PLACEHOLDER_IMAGE_MODES", function() {
                return PLACEHOLDER_IMAGE_MODES;
              });
              __webpack_require__.d(constants_namespaceObject, "ACCESSIBILITY_MODES", function() {
                return ACCESSIBILITY_MODES;
              });
              __webpack_require__.d(constants_namespaceObject, "URL_KEYS", function() {
                return URL_KEYS;
              });
              var lodash_namespaceObject = {};
              __webpack_require__.r(lodash_namespaceObject);
              __webpack_require__.d(lodash_namespaceObject, "getSDKAnalyticsSignature", function() {
                return getSDKAnalyticsSignature;
              });
              __webpack_require__.d(lodash_namespaceObject, "getAnalyticsOptions", function() {
                return getAnalyticsOptions;
              });
              __webpack_require__.d(lodash_namespaceObject, "assign", function() {
                return assign_root_assign_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "cloneDeep", function() {
                return cloneDeep_root_cloneDeep_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "compact", function() {
                return compact_root_compact_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "difference", function() {
                return difference_root_difference_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "functions", function() {
                return functions_root_functions_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "identity", function() {
                return identity_root_identity_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "includes", function() {
                return includes_root_includes_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "isArray", function() {
                return isArray_root_isArray_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "isPlainObject", function() {
                return isPlainObject_root_isPlainObject_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "isString", function() {
                return isString_root_isString_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "merge", function() {
                return merge_root_merge_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "contains", function() {
                return includes_root_includes_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "isIntersectionObserverSupported", function() {
                return isIntersectionObserverSupported;
              });
              __webpack_require__.d(lodash_namespaceObject, "isNativeLazyLoadSupported", function() {
                return isNativeLazyLoadSupported;
              });
              __webpack_require__.d(lodash_namespaceObject, "detectIntersection", function() {
                return detectIntersection;
              });
              __webpack_require__.d(lodash_namespaceObject, "omit", function() {
                return omit;
              });
              __webpack_require__.d(lodash_namespaceObject, "allStrings", function() {
                return baseutil_allStrings;
              });
              __webpack_require__.d(lodash_namespaceObject, "without", function() {
                return without;
              });
              __webpack_require__.d(lodash_namespaceObject, "isNumberLike", function() {
                return isNumberLike;
              });
              __webpack_require__.d(lodash_namespaceObject, "smartEscape", function() {
                return smartEscape;
              });
              __webpack_require__.d(lodash_namespaceObject, "defaults", function() {
                return defaults;
              });
              __webpack_require__.d(lodash_namespaceObject, "objectProto", function() {
                return objectProto;
              });
              __webpack_require__.d(lodash_namespaceObject, "objToString", function() {
                return objToString;
              });
              __webpack_require__.d(lodash_namespaceObject, "isObject", function() {
                return isObject;
              });
              __webpack_require__.d(lodash_namespaceObject, "funcTag", function() {
                return funcTag;
              });
              __webpack_require__.d(lodash_namespaceObject, "reWords", function() {
                return reWords;
              });
              __webpack_require__.d(lodash_namespaceObject, "camelCase", function() {
                return camelCase2;
              });
              __webpack_require__.d(lodash_namespaceObject, "snakeCase", function() {
                return snakeCase;
              });
              __webpack_require__.d(lodash_namespaceObject, "convertKeys", function() {
                return convertKeys;
              });
              __webpack_require__.d(lodash_namespaceObject, "withCamelCaseKeys", function() {
                return withCamelCaseKeys2;
              });
              __webpack_require__.d(lodash_namespaceObject, "withSnakeCaseKeys", function() {
                return withSnakeCaseKeys;
              });
              __webpack_require__.d(lodash_namespaceObject, "base64Encode", function() {
                return base64Encode;
              });
              __webpack_require__.d(lodash_namespaceObject, "base64EncodeURL", function() {
                return base64EncodeURL;
              });
              __webpack_require__.d(lodash_namespaceObject, "extractUrlParams", function() {
                return extractUrlParams;
              });
              __webpack_require__.d(lodash_namespaceObject, "patchFetchFormat", function() {
                return patchFetchFormat;
              });
              __webpack_require__.d(lodash_namespaceObject, "optionConsume", function() {
                return optionConsume;
              });
              __webpack_require__.d(lodash_namespaceObject, "isEmpty", function() {
                return isEmpty2;
              });
              __webpack_require__.d(lodash_namespaceObject, "isAndroid", function() {
                return isAndroid;
              });
              __webpack_require__.d(lodash_namespaceObject, "isEdge", function() {
                return isEdge;
              });
              __webpack_require__.d(lodash_namespaceObject, "isChrome", function() {
                return isChrome;
              });
              __webpack_require__.d(lodash_namespaceObject, "isSafari", function() {
                return isSafari;
              });
              __webpack_require__.d(lodash_namespaceObject, "isElement", function() {
                return isElement_root_isElement_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "isFunction", function() {
                return isFunction_root_isFunction_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "trim", function() {
                return trim_root_trim_default.a;
              });
              __webpack_require__.d(lodash_namespaceObject, "getData", function() {
                return lodash_getData;
              });
              __webpack_require__.d(lodash_namespaceObject, "setData", function() {
                return lodash_setData;
              });
              __webpack_require__.d(lodash_namespaceObject, "getAttribute", function() {
                return lodash_getAttribute;
              });
              __webpack_require__.d(lodash_namespaceObject, "setAttribute", function() {
                return lodash_setAttribute;
              });
              __webpack_require__.d(lodash_namespaceObject, "removeAttribute", function() {
                return lodash_removeAttribute;
              });
              __webpack_require__.d(lodash_namespaceObject, "setAttributes", function() {
                return setAttributes;
              });
              __webpack_require__.d(lodash_namespaceObject, "hasClass", function() {
                return lodash_hasClass;
              });
              __webpack_require__.d(lodash_namespaceObject, "addClass", function() {
                return lodash_addClass;
              });
              __webpack_require__.d(lodash_namespaceObject, "getStyles", function() {
                return getStyles;
              });
              __webpack_require__.d(lodash_namespaceObject, "cssExpand", function() {
                return cssExpand;
              });
              __webpack_require__.d(lodash_namespaceObject, "domStyle", function() {
                return domStyle;
              });
              __webpack_require__.d(lodash_namespaceObject, "curCSS", function() {
                return curCSS;
              });
              __webpack_require__.d(lodash_namespaceObject, "cssValue", function() {
                return cssValue;
              });
              __webpack_require__.d(lodash_namespaceObject, "augmentWidthOrHeight", function() {
                return augmentWidthOrHeight;
              });
              __webpack_require__.d(lodash_namespaceObject, "getWidthOrHeight", function() {
                return getWidthOrHeight;
              });
              __webpack_require__.d(lodash_namespaceObject, "width", function() {
                return lodash_width;
              });
              var utf8_encode;
              var src_utf8_encode = utf8_encode = function utf8_encode2(argString) {
                var c1, enc, end, n, start, string, stringl, utftext;
                if (argString === null || typeof argString === "undefined") {
                  return "";
                }
                string = argString + "";
                utftext = "";
                start = void 0;
                end = void 0;
                stringl = 0;
                start = end = 0;
                stringl = string.length;
                n = 0;
                while (n < stringl) {
                  c1 = string.charCodeAt(n);
                  enc = null;
                  if (c1 < 128) {
                    end++;
                  } else if (c1 > 127 && c1 < 2048) {
                    enc = String.fromCharCode(c1 >> 6 | 192, c1 & 63 | 128);
                  } else {
                    enc = String.fromCharCode(c1 >> 12 | 224, c1 >> 6 & 63 | 128, c1 & 63 | 128);
                  }
                  if (enc !== null) {
                    if (end > start) {
                      utftext += string.slice(start, end);
                    }
                    utftext += enc;
                    start = end = n + 1;
                  }
                  n++;
                }
                if (end > start) {
                  utftext += string.slice(start, stringl);
                }
                return utftext;
              };
              function crc32(str) {
                var crc, i, iTop, table, x, y;
                str = src_utf8_encode(str);
                table = "00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D";
                crc = 0;
                x = 0;
                y = 0;
                crc = crc ^ -1;
                i = 0;
                iTop = str.length;
                while (i < iTop) {
                  y = (crc ^ str.charCodeAt(i)) & 255;
                  x = "0x" + table.substr(y * 9, 8);
                  crc = crc >>> 8 ^ x;
                  i++;
                }
                crc = crc ^ -1;
                if (crc < 0) {
                  crc += 4294967296;
                }
                return crc;
              }
              var src_crc32 = crc32;
              function stringPad(value, targetLength, padString) {
                targetLength = targetLength >> 0;
                padString = String(typeof padString !== "undefined" ? padString : " ");
                if (value.length > targetLength) {
                  return String(value);
                } else {
                  targetLength = targetLength - value.length;
                  if (targetLength > padString.length) {
                    padString += repeatStringNumTimes(padString, targetLength / padString.length);
                  }
                  return padString.slice(0, targetLength) + String(value);
                }
              }
              function repeatStringNumTimes(string, times) {
                var repeatedString = "";
                while (times > 0) {
                  repeatedString += string;
                  times--;
                }
                return repeatedString;
              }
              function _toConsumableArray(arr) {
                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
              }
              function _nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _iterableToArray(iter) {
                if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                  return Array.from(iter);
              }
              function _arrayWithoutHoles(arr) {
                if (Array.isArray(arr))
                  return _arrayLikeToArray(arr);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
              var base64Map_num = 0;
              var map = {};
              _toConsumableArray(chars).forEach(function(_char) {
                var key = base64Map_num.toString(2);
                key = stringPad(key, 6, "0");
                map[key] = _char;
                base64Map_num++;
              });
              var base64Map = map;
              function reverseVersion(semVer) {
                if (semVer.split(".").length < 2) {
                  throw new Error("invalid semVer, must have at least two segments");
                }
                return semVer.split(".").reverse().map(function(segment) {
                  return stringPad(segment, 2, "0");
                }).join(".");
              }
              function encodeVersion(semVer) {
                var strResult = "";
                var parts = semVer.split(".").length;
                var paddedStringLength = parts * 6;
                var paddedReversedSemver = reverseVersion(semVer);
                var num = parseInt(paddedReversedSemver.split(".").join(""));
                var paddedBinary = num.toString(2);
                paddedBinary = stringPad(paddedBinary, paddedStringLength, "0");
                if (paddedBinary.length % 6 !== 0) {
                  throw "Version must be smaller than 43.21.26)";
                }
                paddedBinary.match(/.{1,6}/g).forEach(function(bitString) {
                  strResult += base64Map[bitString];
                });
                return strResult;
              }
              function getSDKAnalyticsSignature() {
                var analyticsOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                try {
                  var twoPartVersion = removePatchFromSemver(analyticsOptions.techVersion);
                  var encodedSDKVersion = encodeVersion(analyticsOptions.sdkSemver);
                  var encodedTechVersion = encodeVersion(twoPartVersion);
                  var featureCode = analyticsOptions.feature;
                  var SDKCode = analyticsOptions.sdkCode;
                  var algoVersion = "A";
                  return "".concat(algoVersion).concat(SDKCode).concat(encodedSDKVersion).concat(encodedTechVersion).concat(featureCode);
                } catch (e) {
                  return "E";
                }
              }
              function removePatchFromSemver(semVerStr) {
                var parts = semVerStr.split(".");
                return "".concat(parts[0], ".").concat(parts[1]);
              }
              function getAnalyticsOptions(options) {
                var analyticsOptions = {
                  sdkSemver: options.sdkSemver,
                  techVersion: options.techVersion,
                  sdkCode: options.sdkCode,
                  feature: "0"
                };
                if (options.urlAnalytics) {
                  if (options.accessibility) {
                    analyticsOptions.feature = "D";
                  }
                  if (options.loading === "lazy") {
                    analyticsOptions.feature = "C";
                  }
                  if (options.responsive) {
                    analyticsOptions.feature = "A";
                  }
                  if (options.placeholder) {
                    analyticsOptions.feature = "B";
                  }
                  return analyticsOptions;
                } else {
                  return {};
                }
              }
              var assign_root_assign_ = __webpack_require__("lodash/assign");
              var assign_root_assign_default = __webpack_require__.n(assign_root_assign_);
              var cloneDeep_root_cloneDeep_ = __webpack_require__("lodash/cloneDeep");
              var cloneDeep_root_cloneDeep_default = __webpack_require__.n(cloneDeep_root_cloneDeep_);
              var compact_root_compact_ = __webpack_require__("lodash/compact");
              var compact_root_compact_default = __webpack_require__.n(compact_root_compact_);
              var difference_root_difference_ = __webpack_require__("lodash/difference");
              var difference_root_difference_default = __webpack_require__.n(difference_root_difference_);
              var functions_root_functions_ = __webpack_require__("lodash/functions");
              var functions_root_functions_default = __webpack_require__.n(functions_root_functions_);
              var identity_root_identity_ = __webpack_require__("lodash/identity");
              var identity_root_identity_default = __webpack_require__.n(identity_root_identity_);
              var includes_root_includes_ = __webpack_require__("lodash/includes");
              var includes_root_includes_default = __webpack_require__.n(includes_root_includes_);
              var isArray_root_isArray_ = __webpack_require__("lodash/isArray");
              var isArray_root_isArray_default = __webpack_require__.n(isArray_root_isArray_);
              var isPlainObject_root_isPlainObject_ = __webpack_require__("lodash/isPlainObject");
              var isPlainObject_root_isPlainObject_default = __webpack_require__.n(isPlainObject_root_isPlainObject_);
              var isString_root_isString_ = __webpack_require__("lodash/isString");
              var isString_root_isString_default = __webpack_require__.n(isString_root_isString_);
              var merge_root_merge_ = __webpack_require__("lodash/merge");
              var merge_root_merge_default = __webpack_require__.n(merge_root_merge_);
              var isElement_root_isElement_ = __webpack_require__("lodash/isElement");
              var isElement_root_isElement_default = __webpack_require__.n(isElement_root_isElement_);
              var isFunction_root_isFunction_ = __webpack_require__("lodash/isFunction");
              var isFunction_root_isFunction_default = __webpack_require__.n(isFunction_root_isFunction_);
              var trim_root_trim_ = __webpack_require__("lodash/trim");
              var trim_root_trim_default = __webpack_require__.n(trim_root_trim_);
              function _typeof(obj) {
                "@babel/helpers - typeof";
                return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, _typeof(obj);
              }
              function isIntersectionObserverSupported() {
                return (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.IntersectionObserver;
              }
              function isNativeLazyLoadSupported() {
                return (typeof HTMLImageElement === "undefined" ? "undefined" : _typeof(HTMLImageElement)) === "object" && HTMLImageElement.prototype.loading;
              }
              function detectIntersection(el, onIntersect) {
                try {
                  if (isNativeLazyLoadSupported() || !isIntersectionObserverSupported()) {
                    onIntersect();
                    return;
                  }
                  var observer = new IntersectionObserver(function(entries) {
                    entries.forEach(function(entry) {
                      if (entry.isIntersecting) {
                        onIntersect();
                        observer.unobserve(entry.target);
                      }
                    });
                  }, {
                    threshold: [0, 0.01]
                  });
                  observer.observe(el);
                } catch (e) {
                  onIntersect();
                }
              }
              var VERSION = "2.5.0";
              var CF_SHARED_CDN = "d3jpl91pxevbkh.cloudfront.net";
              var OLD_AKAMAI_SHARED_CDN = "cloudinary-a.akamaihd.net";
              var AKAMAI_SHARED_CDN = "res.cloudinary.com";
              var SHARED_CDN = AKAMAI_SHARED_CDN;
              var DEFAULT_TIMEOUT_MS = 1e4;
              var DEFAULT_POSTER_OPTIONS = {
                format: "jpg",
                resource_type: "video"
              };
              var DEFAULT_VIDEO_SOURCE_TYPES = ["webm", "mp4", "ogv"];
              var SEO_TYPES = {
                "image/upload": "images",
                "image/private": "private_images",
                "image/authenticated": "authenticated_images",
                "raw/upload": "files",
                "video/upload": "videos"
              };
              var DEFAULT_IMAGE_PARAMS = {
                resource_type: "image",
                transformation: [],
                type: "upload"
              };
              var DEFAULT_VIDEO_PARAMS = {
                fallback_content: "",
                resource_type: "video",
                source_transformation: {},
                source_types: DEFAULT_VIDEO_SOURCE_TYPES,
                transformation: [],
                type: "upload"
              };
              var DEFAULT_VIDEO_SOURCES = [{
                type: "mp4",
                codecs: "hev1",
                transformations: {
                  video_codec: "h265"
                }
              }, {
                type: "webm",
                codecs: "vp9",
                transformations: {
                  video_codec: "vp9"
                }
              }, {
                type: "mp4",
                transformations: {
                  video_codec: "auto"
                }
              }, {
                type: "webm",
                transformations: {
                  video_codec: "auto"
                }
              }];
              var DEFAULT_EXTERNAL_LIBRARIES = {
                seeThru: "https://unpkg.com/seethru@4/dist/seeThru.min.js"
              };
              var PLACEHOLDER_IMAGE_MODES = {
                "blur": [{
                  effect: "blur:2000",
                  quality: 1,
                  fetch_format: "auto"
                }],
                // Default
                "pixelate": [{
                  effect: "pixelate",
                  quality: 1,
                  fetch_format: "auto"
                }],
                // Generates a pixel size image which color is the predominant color of the original image.
                "predominant-color-pixel": [{
                  width: "iw_div_2",
                  aspect_ratio: 1,
                  crop: "pad",
                  background: "auto"
                }, {
                  crop: "crop",
                  width: 1,
                  height: 1,
                  gravity: "north_east"
                }, {
                  fetch_format: "auto",
                  quality: "auto"
                }],
                // Generates an image which color is the predominant color of the original image.
                "predominant-color": [{
                  variables: [["$currWidth", "w"], ["$currHeight", "h"]]
                }, {
                  width: "iw_div_2",
                  aspect_ratio: 1,
                  crop: "pad",
                  background: "auto"
                }, {
                  crop: "crop",
                  width: 10,
                  height: 10,
                  gravity: "north_east"
                }, {
                  width: "$currWidth",
                  height: "$currHeight",
                  crop: "fill"
                }, {
                  fetch_format: "auto",
                  quality: "auto"
                }],
                "vectorize": [{
                  effect: "vectorize:3:0.1",
                  fetch_format: "svg"
                }]
              };
              var ACCESSIBILITY_MODES = {
                darkmode: "tint:75:black",
                brightmode: "tint:50:white",
                monochrome: "grayscale",
                colorblind: "assist_colorblind"
              };
              var URL_KEYS = ["accessibility", "api_secret", "auth_token", "cdn_subdomain", "cloud_name", "cname", "format", "placeholder", "private_cdn", "resource_type", "secure", "secure_cdn_subdomain", "secure_distribution", "shorten", "sign_url", "signature", "ssl_detected", "type", "url_suffix", "use_root_path", "version"];
              function baseutil_typeof(obj) {
                "@babel/helpers - typeof";
                return baseutil_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, baseutil_typeof(obj);
              }
              function omit(obj, keys) {
                obj = obj || {};
                var srcKeys = Object.keys(obj).filter(function(key) {
                  return !includes_root_includes_default()(keys, key);
                });
                var filtered = {};
                srcKeys.forEach(function(key) {
                  return filtered[key] = obj[key];
                });
                return filtered;
              }
              var baseutil_allStrings = function allStrings(list) {
                return list.length && list.every(isString_root_isString_default.a);
              };
              var without = function without2(array, item) {
                return array.filter(function(v) {
                  return v !== item;
                });
              };
              var isNumberLike = function isNumberLike2(value) {
                return value != null && !isNaN(parseFloat(value));
              };
              var smartEscape = function smartEscape2(string) {
                var unsafe = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : /([^a-zA-Z0-9_.\-\/:]+)/g;
                return string.replace(unsafe, function(match) {
                  return match.split("").map(function(c) {
                    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
                  }).join("");
                });
              };
              var defaults = function defaults2(destination) {
                for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  sources[_key - 1] = arguments[_key];
                }
                return sources.reduce(function(dest, source) {
                  var key, value;
                  for (key in source) {
                    value = source[key];
                    if (dest[key] === void 0) {
                      dest[key] = value;
                    }
                  }
                  return dest;
                }, destination);
              };
              var objectProto = Object.prototype;
              var objToString = objectProto.toString;
              var isObject = function isObject2(value) {
                var type;
                type = baseutil_typeof(value);
                return !!value && (type === "object" || type === "function");
              };
              var funcTag = "[object Function]";
              var isFunction = function isFunction2(value) {
                return isObject(value) && objToString.call(value) === funcTag;
              };
              var reWords = function() {
                var lower, upper;
                upper = "[A-Z]";
                lower = "[a-z]+";
                return RegExp(upper + "+(?=" + upper + lower + ")|" + upper + "?" + lower + "|" + upper + "+|[0-9]+", "g");
              }();
              var camelCase2 = function camelCase3(source) {
                var words = source.match(reWords);
                words = words.map(function(word) {
                  return word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase();
                });
                words[0] = words[0].toLocaleLowerCase();
                return words.join("");
              };
              var snakeCase = function snakeCase2(source) {
                var words = source.match(reWords);
                words = words.map(function(word) {
                  return word.toLocaleLowerCase();
                });
                return words.join("_");
              };
              var convertKeys = function convertKeys2(source, converter) {
                var result, value;
                result = {};
                for (var key in source) {
                  value = source[key];
                  if (converter) {
                    key = converter(key);
                  }
                  if (!isEmpty2(key)) {
                    result[key] = value;
                  }
                }
                return result;
              };
              var withCamelCaseKeys2 = function withCamelCaseKeys3(source) {
                return convertKeys(source, camelCase2);
              };
              var withSnakeCaseKeys = function withSnakeCaseKeys2(source) {
                return convertKeys(source, snakeCase);
              };
              var base64Encode = typeof btoa !== "undefined" && isFunction(btoa) ? btoa : typeof Buffer !== "undefined" && isFunction(Buffer) ? function(input) {
                if (!(input instanceof Buffer)) {
                  input = new Buffer.from(String(input), "binary");
                }
                return input.toString("base64");
              } : function(input) {
                throw new Error("No base64 encoding function found");
              };
              var base64EncodeURL = function base64EncodeURL2(url) {
                try {
                  url = decodeURI(url);
                } finally {
                  url = encodeURI(url);
                }
                return base64Encode(url);
              };
              function extractUrlParams(options) {
                return URL_KEYS.reduce(function(obj, key) {
                  if (options[key] != null) {
                    obj[key] = options[key];
                  }
                  return obj;
                }, {});
              }
              function patchFetchFormat(options) {
                if (options == null) {
                  options = {};
                }
                if (options.type === "fetch") {
                  if (options.fetch_format == null) {
                    options.fetch_format = optionConsume(options, "format");
                  }
                }
              }
              function optionConsume(options, option_name, default_value) {
                var result = options[option_name];
                delete options[option_name];
                if (result != null) {
                  return result;
                } else {
                  return default_value;
                }
              }
              function isEmpty2(value) {
                if (value == null) {
                  return true;
                }
                if (typeof value.length == "number") {
                  return value.length === 0;
                }
                if (typeof value.size == "number") {
                  return value.size === 0;
                }
                if (baseutil_typeof(value) == "object") {
                  for (var key in value) {
                    if (value.hasOwnProperty(key)) {
                      return false;
                    }
                  }
                  return true;
                }
                return true;
              }
              function getUserAgent() {
                return navigator && navigator.userAgent || "";
              }
              function isAndroid() {
                var userAgent = getUserAgent();
                return /Android/i.test(userAgent);
              }
              function isEdge() {
                var userAgent = getUserAgent();
                return /Edg/i.test(userAgent);
              }
              function isChrome() {
                var userAgent = getUserAgent();
                return !isEdge() && (/Chrome/i.test(userAgent) || /CriOS/i.test(userAgent));
              }
              function isSafari() {
                var userAgent = getUserAgent();
                return /Safari/i.test(userAgent) && !isChrome() && !isAndroid() && !isEdge();
              }
              var nodeContains;
              var lodash_getData = function getData(element, name) {
                switch (false) {
                  case !(element == null):
                    return void 0;
                  case !isFunction_root_isFunction_default()(element.getAttribute):
                    return element.getAttribute("data-".concat(name));
                  case !isFunction_root_isFunction_default()(element.getAttr):
                    return element.getAttr("data-".concat(name));
                  case !isFunction_root_isFunction_default()(element.data):
                    return element.data(name);
                  case !(isFunction_root_isFunction_default()(typeof jQuery !== "undefined" && jQuery.fn && jQuery.fn.data) && isElement_root_isElement_default()(element)):
                    return jQuery(element).data(name);
                }
              };
              var lodash_setData = function setData(element, name, value) {
                switch (false) {
                  case !(element == null):
                    return void 0;
                  case !isFunction_root_isFunction_default()(element.setAttribute):
                    return element.setAttribute("data-".concat(name), value);
                  case !isFunction_root_isFunction_default()(element.setAttr):
                    return element.setAttr("data-".concat(name), value);
                  case !isFunction_root_isFunction_default()(element.data):
                    return element.data(name, value);
                  case !(isFunction_root_isFunction_default()(typeof jQuery !== "undefined" && jQuery.fn && jQuery.fn.data) && isElement_root_isElement_default()(element)):
                    return jQuery(element).data(name, value);
                }
              };
              var lodash_getAttribute = function getAttribute(element, name) {
                switch (false) {
                  case !(element == null):
                    return void 0;
                  case !isFunction_root_isFunction_default()(element.getAttribute):
                    return element.getAttribute(name);
                  case !isFunction_root_isFunction_default()(element.attr):
                    return element.attr(name);
                  case !isFunction_root_isFunction_default()(element.getAttr):
                    return element.getAttr(name);
                }
              };
              var lodash_setAttribute = function setAttribute(element, name, value) {
                switch (false) {
                  case !(element == null):
                    return void 0;
                  case !isFunction_root_isFunction_default()(element.setAttribute):
                    return element.setAttribute(name, value);
                  case !isFunction_root_isFunction_default()(element.attr):
                    return element.attr(name, value);
                  case !isFunction_root_isFunction_default()(element.setAttr):
                    return element.setAttr(name, value);
                }
              };
              var lodash_removeAttribute = function removeAttribute(element, name) {
                switch (false) {
                  case !(element == null):
                    return void 0;
                  case !isFunction_root_isFunction_default()(element.removeAttribute):
                    return element.removeAttribute(name);
                  default:
                    return lodash_setAttribute(element, void 0);
                }
              };
              var setAttributes = function setAttributes2(element, attributes) {
                var name, results, value;
                results = [];
                for (name in attributes) {
                  value = attributes[name];
                  if (value != null) {
                    results.push(lodash_setAttribute(element, name, value));
                  } else {
                    results.push(lodash_removeAttribute(element, name));
                  }
                }
                return results;
              };
              var lodash_hasClass = function hasClass(element, name) {
                if (isElement_root_isElement_default()(element)) {
                  return element.className.match(new RegExp("\\b".concat(name, "\\b")));
                }
              };
              var lodash_addClass = function addClass(element, name) {
                if (!element.className.match(new RegExp("\\b".concat(name, "\\b")))) {
                  return element.className = trim_root_trim_default()("".concat(element.className, " ").concat(name));
                }
              };
              var getStyles = function getStyles2(elem) {
                if (elem.ownerDocument.defaultView.opener) {
                  return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
                }
                return window.getComputedStyle(elem, null);
              };
              var cssExpand = ["Top", "Right", "Bottom", "Left"];
              nodeContains = function nodeContains2(a, b) {
                var adown, bup;
                adown = a.nodeType === 9 ? a.documentElement : a;
                bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && adown.contains(bup));
              };
              var domStyle = function domStyle2(elem, name) {
                if (!(!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style)) {
                  return elem.style[name];
                }
              };
              var curCSS = function curCSS2(elem, name, computed) {
                var maxWidth, minWidth, ret, rmargin, style, width;
                rmargin = /^margin/;
                width = void 0;
                minWidth = void 0;
                maxWidth = void 0;
                ret = void 0;
                style = elem.style;
                computed = computed || getStyles(elem);
                if (computed) {
                  ret = computed.getPropertyValue(name) || computed[name];
                }
                if (computed) {
                  if (ret === "" && !nodeContains(elem.ownerDocument, elem)) {
                    ret = domStyle(elem, name);
                  }
                  if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                  }
                }
                if (ret !== void 0) {
                  return ret + "";
                } else {
                  return ret;
                }
              };
              var cssValue = function cssValue2(elem, name, convert, styles) {
                var val;
                val = curCSS(elem, name, styles);
                if (convert) {
                  return parseFloat(val);
                } else {
                  return val;
                }
              };
              var augmentWidthOrHeight = function augmentWidthOrHeight2(elem, name, extra, isBorderBox, styles) {
                var i, len, side, sides, val;
                if (extra === (isBorderBox ? "border" : "content")) {
                  return 0;
                } else {
                  sides = name === "width" ? ["Right", "Left"] : ["Top", "Bottom"];
                  val = 0;
                  for (i = 0, len = sides.length; i < len; i++) {
                    side = sides[i];
                    if (extra === "margin") {
                      val += cssValue(elem, extra + side, true, styles);
                    }
                    if (isBorderBox) {
                      if (extra === "content") {
                        val -= cssValue(elem, "padding".concat(side), true, styles);
                      }
                      if (extra !== "margin") {
                        val -= cssValue(elem, "border".concat(side, "Width"), true, styles);
                      }
                    } else {
                      val += cssValue(elem, "padding".concat(side), true, styles);
                      if (extra !== "padding") {
                        val += cssValue(elem, "border".concat(side, "Width"), true, styles);
                      }
                    }
                  }
                  return val;
                }
              };
              var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
              var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
              var getWidthOrHeight = function getWidthOrHeight2(elem, name, extra) {
                var isBorderBox, styles, val, valueIsBorderBox;
                valueIsBorderBox = true;
                val = name === "width" ? elem.offsetWidth : elem.offsetHeight;
                styles = getStyles(elem);
                isBorderBox = cssValue(elem, "boxSizing", false, styles) === "border-box";
                if (val <= 0 || val == null) {
                  val = curCSS(elem, name, styles);
                  if (val < 0 || val == null) {
                    val = elem.style[name];
                  }
                  if (rnumnonpx.test(val)) {
                    return val;
                  }
                  valueIsBorderBox = isBorderBox && val === elem.style[name];
                  val = parseFloat(val) || 0;
                }
                return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles);
              };
              var lodash_width = function width(element) {
                return getWidthOrHeight(element, "width", "content");
              };
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              var Expression = function() {
                function Expression2(expressionStr) {
                  _classCallCheck(this, Expression2);
                  this.expressions = [];
                  if (expressionStr != null) {
                    this.expressions.push(Expression2.normalize(expressionStr));
                  }
                }
                _createClass(Expression2, [{
                  key: "serialize",
                  value: (
                    /**
                     * Serialize the expression
                     * @return {string} the expression as a string
                     */
                    function serialize() {
                      return Expression2.normalize(this.expressions.join("_"));
                    }
                  )
                }, {
                  key: "toString",
                  value: function toString() {
                    return this.serialize();
                  }
                  /**
                   * Get the parent transformation of this expression
                   * @return Transformation
                   */
                }, {
                  key: "getParent",
                  value: function getParent() {
                    return this.parent;
                  }
                  /**
                   * Set the parent transformation of this expression
                   * @param {Transformation} the parent transformation
                   * @return {Expression} this expression
                   */
                }, {
                  key: "setParent",
                  value: function setParent(parent) {
                    this.parent = parent;
                    return this;
                  }
                  /**
                   * Add a expression
                   * @function Expression#predicate
                   * @internal
                   */
                }, {
                  key: "predicate",
                  value: function predicate(name, operator, value) {
                    if (Expression2.OPERATORS[operator] != null) {
                      operator = Expression2.OPERATORS[operator];
                    }
                    this.expressions.push("".concat(name, "_").concat(operator, "_").concat(value));
                    return this;
                  }
                  /**
                   * @function Expression#and
                   */
                }, {
                  key: "and",
                  value: function and() {
                    this.expressions.push("and");
                    return this;
                  }
                  /**
                   * @function Expression#or
                   */
                }, {
                  key: "or",
                  value: function or() {
                    this.expressions.push("or");
                    return this;
                  }
                  /**
                   * Conclude expression
                   * @function Expression#then
                   * @return {Transformation} the transformation this expression is defined for
                   */
                }, {
                  key: "then",
                  value: function then() {
                    return this.getParent()["if"](this.toString());
                  }
                  /**
                   * @function Expression#height
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Expression} this expression
                   */
                }, {
                  key: "height",
                  value: function height(operator, value) {
                    return this.predicate("h", operator, value);
                  }
                  /**
                   * @function Expression#width
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Expression} this expression
                   */
                }, {
                  key: "width",
                  value: function width(operator, value) {
                    return this.predicate("w", operator, value);
                  }
                  /**
                   * @function Expression#aspectRatio
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Expression} this expression
                   */
                }, {
                  key: "aspectRatio",
                  value: function aspectRatio(operator, value) {
                    return this.predicate("ar", operator, value);
                  }
                  /**
                   * @function Expression#pages
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Expression} this expression
                   */
                }, {
                  key: "pageCount",
                  value: function pageCount(operator, value) {
                    return this.predicate("pc", operator, value);
                  }
                  /**
                   * @function Expression#faces
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Expression} this expression
                   */
                }, {
                  key: "faceCount",
                  value: function faceCount(operator, value) {
                    return this.predicate("fc", operator, value);
                  }
                }, {
                  key: "value",
                  value: function value(_value) {
                    this.expressions.push(_value);
                    return this;
                  }
                  /**
                   */
                }], [{
                  key: "new",
                  value: function _new(expressionStr) {
                    return new this(expressionStr);
                  }
                  /**
                   * Normalize a string expression
                   * @function Cloudinary#normalize
                   * @param {string} expression a expression, e.g. "w gt 100", "width_gt_100", "width > 100"
                   * @return {string} the normalized form of the value expression, e.g. "w_gt_100"
                   */
                }, {
                  key: "normalize",
                  value: function normalize(expression2) {
                    if (expression2 == null) {
                      return expression2;
                    }
                    expression2 = String(expression2);
                    var operators = "\\|\\||>=|<=|&&|!=|>|=|<|/|-|\\+|\\*|\\^";
                    var operatorsPattern = "((" + operators + ")(?=[ _]))";
                    var operatorsReplaceRE = new RegExp(operatorsPattern, "g");
                    expression2 = expression2.replace(operatorsReplaceRE, function(match) {
                      return Expression2.OPERATORS[match];
                    });
                    var predefinedVarsPattern = "(" + Object.keys(Expression2.PREDEFINED_VARS).map(function(v) {
                      return ":".concat(v, "|").concat(v);
                    }).join("|") + ")";
                    var userVariablePattern = "(\\$_*[^_ ]+)";
                    var variablesReplaceRE = new RegExp("".concat(userVariablePattern, "|").concat(predefinedVarsPattern), "g");
                    expression2 = expression2.replace(variablesReplaceRE, function(match) {
                      return Expression2.PREDEFINED_VARS[match] || match;
                    });
                    return expression2.replace(/[ _]+/g, "_");
                  }
                }, {
                  key: "variable",
                  value: function variable(name, value) {
                    return new this(name).value(value);
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "width"
                   * @function Expression.width
                   */
                }, {
                  key: "width",
                  value: function width() {
                    return new this("width");
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "height"
                   * @function Expression.height
                   */
                }, {
                  key: "height",
                  value: function height() {
                    return new this("height");
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "initialWidth"
                   * @function Expression.initialWidth
                   */
                }, {
                  key: "initialWidth",
                  value: function initialWidth() {
                    return new this("initialWidth");
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "initialHeight"
                   * @function Expression.initialHeight
                   */
                }, {
                  key: "initialHeight",
                  value: function initialHeight() {
                    return new this("initialHeight");
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "aspectRatio"
                   * @function Expression.aspectRatio
                   */
                }, {
                  key: "aspectRatio",
                  value: function aspectRatio() {
                    return new this("aspectRatio");
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "initialAspectRatio"
                   * @function Expression.initialAspectRatio
                   */
                }, {
                  key: "initialAspectRatio",
                  value: function initialAspectRatio() {
                    return new this("initialAspectRatio");
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "pageCount"
                   * @function Expression.pageCount
                   */
                }, {
                  key: "pageCount",
                  value: function pageCount() {
                    return new this("pageCount");
                  }
                  /**
                   * @returns Expression new expression with the predefined variable "faceCount"
                   * @function Expression.faceCount
                   */
                }, {
                  key: "faceCount",
                  value: function faceCount() {
                    return new this("faceCount");
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "currentPage"
                   * @function Expression.currentPage
                   */
                }, {
                  key: "currentPage",
                  value: function currentPage() {
                    return new this("currentPage");
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "tags"
                   * @function Expression.tags
                   */
                }, {
                  key: "tags",
                  value: function tags() {
                    return new this("tags");
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "pageX"
                   * @function Expression.pageX
                   */
                }, {
                  key: "pageX",
                  value: function pageX() {
                    return new this("pageX");
                  }
                  /**
                   * @returns Expression a new expression with the predefined variable "pageY"
                   * @function Expression.pageY
                   */
                }, {
                  key: "pageY",
                  value: function pageY() {
                    return new this("pageY");
                  }
                }]);
                return Expression2;
              }();
              Expression.OPERATORS = {
                "=": "eq",
                "!=": "ne",
                "<": "lt",
                ">": "gt",
                "<=": "lte",
                ">=": "gte",
                "&&": "and",
                "||": "or",
                "*": "mul",
                "/": "div",
                "+": "add",
                "-": "sub",
                "^": "pow"
              };
              Expression.PREDEFINED_VARS = {
                "aspect_ratio": "ar",
                "aspectRatio": "ar",
                "current_page": "cp",
                "currentPage": "cp",
                "duration": "du",
                "face_count": "fc",
                "faceCount": "fc",
                "height": "h",
                "initial_aspect_ratio": "iar",
                "initial_duration": "idu",
                "initial_height": "ih",
                "initial_width": "iw",
                "initialAspectRatio": "iar",
                "initialDuration": "idu",
                "initialHeight": "ih",
                "initialWidth": "iw",
                "page_count": "pc",
                "page_x": "px",
                "page_y": "py",
                "pageCount": "pc",
                "pageX": "px",
                "pageY": "py",
                "tags": "tags",
                "width": "w"
              };
              Expression.BOUNDRY = "[ _]+";
              var expression = Expression;
              function condition_typeof(obj) {
                "@babel/helpers - typeof";
                return condition_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, condition_typeof(obj);
              }
              function condition_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function condition_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function condition_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  condition_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  condition_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  _setPrototypeOf2(subClass, superClass);
              }
              function _setPrototypeOf2(o, p) {
                _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf2(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self, call) {
                if (call && (condition_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return _assertThisInitialized(self);
              }
              function _assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var Condition = function(_Expression) {
                _inherits(Condition2, _Expression);
                var _super = _createSuper(Condition2);
                function Condition2(conditionStr) {
                  condition_classCallCheck(this, Condition2);
                  return _super.call(this, conditionStr);
                }
                condition_createClass(Condition2, [{
                  key: "height",
                  value: function height(operator, value) {
                    return this.predicate("h", operator, value);
                  }
                  /**
                   * @function Condition#width
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Condition} this condition
                   */
                }, {
                  key: "width",
                  value: function width(operator, value) {
                    return this.predicate("w", operator, value);
                  }
                  /**
                   * @function Condition#aspectRatio
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Condition} this condition
                   */
                }, {
                  key: "aspectRatio",
                  value: function aspectRatio(operator, value) {
                    return this.predicate("ar", operator, value);
                  }
                  /**
                   * @function Condition#pages
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Condition} this condition
                   */
                }, {
                  key: "pageCount",
                  value: function pageCount(operator, value) {
                    return this.predicate("pc", operator, value);
                  }
                  /**
                   * @function Condition#faces
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Condition} this condition
                   */
                }, {
                  key: "faceCount",
                  value: function faceCount(operator, value) {
                    return this.predicate("fc", operator, value);
                  }
                  /**
                   * @function Condition#duration
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Condition} this condition
                   */
                }, {
                  key: "duration",
                  value: function duration(operator, value) {
                    return this.predicate("du", operator, value);
                  }
                  /**
                   * @function Condition#initialDuration
                   * @param {string} operator the comparison operator (e.g. "<", "lt")
                   * @param {string|number} value the right hand side value
                   * @return {Condition} this condition
                   */
                }, {
                  key: "initialDuration",
                  value: function initialDuration(operator, value) {
                    return this.predicate("idu", operator, value);
                  }
                }]);
                return Condition2;
              }(expression);
              var condition = Condition;
              function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || configuration_unsupportedIterableToArray(arr, i) || _nonIterableRest();
              }
              function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function configuration_unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return configuration_arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return configuration_arrayLikeToArray(o, minLen);
              }
              function configuration_arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function _arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function configuration_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function configuration_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function configuration_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  configuration_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  configuration_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              var configuration_Configuration = function() {
                function Configuration(options) {
                  configuration_classCallCheck(this, Configuration);
                  this.configuration = options == null ? {} : cloneDeep_root_cloneDeep_default()(options);
                  defaults(this.configuration, DEFAULT_CONFIGURATION_PARAMS);
                }
                configuration_createClass(Configuration, [{
                  key: "init",
                  value: function init() {
                    this.fromEnvironment();
                    this.fromDocument();
                    return this;
                  }
                  /**
                   * Set a new configuration item
                   * @function Configuration#set
                   * @param {string} name - the name of the item to set
                   * @param {*} value - the value to be set
                   * @return {Configuration}
                   *
                   */
                }, {
                  key: "set",
                  value: function set(name, value) {
                    this.configuration[name] = value;
                    return this;
                  }
                  /**
                   * Get the value of a configuration item
                   * @function Configuration#get
                   * @param {string} name - the name of the item to set
                   * @return {*} the configuration item
                   */
                }, {
                  key: "get",
                  value: function get(name) {
                    return this.configuration[name];
                  }
                }, {
                  key: "merge",
                  value: function merge(config) {
                    assign_root_assign_default()(this.configuration, cloneDeep_root_cloneDeep_default()(config));
                    return this;
                  }
                  /**
                   * Initialize Cloudinary from HTML meta tags.
                   * @function Configuration#fromDocument
                   * @return {Configuration}
                   * @example <meta name="cloudinary_cloud_name" content="mycloud">
                   *
                   */
                }, {
                  key: "fromDocument",
                  value: function fromDocument() {
                    var el, i, len, meta_elements;
                    meta_elements = typeof document !== "undefined" && document !== null ? document.querySelectorAll('meta[name^="cloudinary_"]') : void 0;
                    if (meta_elements) {
                      for (i = 0, len = meta_elements.length; i < len; i++) {
                        el = meta_elements[i];
                        this.configuration[el.getAttribute("name").replace("cloudinary_", "")] = el.getAttribute("content");
                      }
                    }
                    return this;
                  }
                  /**
                   * Initialize Cloudinary from the `CLOUDINARY_URL` environment variable.
                   *
                   * This function will only run under Node.js environment.
                   * @function Configuration#fromEnvironment
                   * @requires Node.js
                   */
                }, {
                  key: "fromEnvironment",
                  value: function fromEnvironment() {
                    var _this = this;
                    var cloudinary_url, query, uri, uriRegex;
                    if (typeof process !== "undefined" && process !== null && process.env && process.env.CLOUDINARY_URL) {
                      cloudinary_url = process.env.CLOUDINARY_URL;
                      uriRegex = /cloudinary:\/\/(?:(\w+)(?:\:([\w-]+))?@)?([\w\.-]+)(?:\/([^?]*))?(?:\?(.+))?/;
                      uri = uriRegex.exec(cloudinary_url);
                      if (uri) {
                        if (uri[3] != null) {
                          this.configuration["cloud_name"] = uri[3];
                        }
                        if (uri[1] != null) {
                          this.configuration["api_key"] = uri[1];
                        }
                        if (uri[2] != null) {
                          this.configuration["api_secret"] = uri[2];
                        }
                        if (uri[4] != null) {
                          this.configuration["private_cdn"] = uri[4] != null;
                        }
                        if (uri[4] != null) {
                          this.configuration["secure_distribution"] = uri[4];
                        }
                        query = uri[5];
                        if (query != null) {
                          query.split("&").forEach(function(value) {
                            var _value$split = value.split("="), _value$split2 = _slicedToArray(_value$split, 2), k = _value$split2[0], v = _value$split2[1];
                            if (v == null) {
                              v = true;
                            }
                            _this.configuration[k] = v;
                          });
                        }
                      }
                    }
                    return this;
                  }
                  /**
                   * Create or modify the Cloudinary client configuration
                   *
                   * Warning: `config()` returns the actual internal configuration object. modifying it will change the configuration.
                   *
                   * This is a backward compatibility method. For new code, use get(), merge() etc.
                   * @function Configuration#config
                   * @param {hash|string|boolean} new_config
                   * @param {string} new_value
                   * @returns {*} configuration, or value
                   *
                   * @see {@link fromEnvironment} for initialization using environment variables
                   * @see {@link fromDocument} for initialization using HTML meta tags
                   */
                }, {
                  key: "config",
                  value: function config(new_config, new_value) {
                    switch (false) {
                      case new_value === void 0:
                        this.set(new_config, new_value);
                        return this.configuration;
                      case !isString_root_isString_default()(new_config):
                        return this.get(new_config);
                      case !isPlainObject_root_isPlainObject_default()(new_config):
                        this.merge(new_config);
                        return this.configuration;
                      default:
                        return this.configuration;
                    }
                  }
                  /**
                   * Returns a copy of the configuration parameters
                   * @function Configuration#toOptions
                   * @returns {Object} a key:value collection of the configuration parameters
                   */
                }, {
                  key: "toOptions",
                  value: function toOptions() {
                    return cloneDeep_root_cloneDeep_default()(this.configuration);
                  }
                }]);
                return Configuration;
              }();
              var DEFAULT_CONFIGURATION_PARAMS = {
                responsive_class: "cld-responsive",
                responsive_use_breakpoints: true,
                round_dpr: true,
                secure: (typeof window !== "undefined" && window !== null ? window.location ? window.location.protocol : void 0 : void 0) === "https:"
              };
              configuration_Configuration.CONFIG_PARAMS = ["api_key", "api_secret", "callback", "cdn_subdomain", "cloud_name", "cname", "private_cdn", "protocol", "resource_type", "responsive", "responsive_class", "responsive_use_breakpoints", "responsive_width", "round_dpr", "secure", "secure_cdn_subdomain", "secure_distribution", "shorten", "type", "upload_preset", "url_suffix", "use_root_path", "version", "externalLibraries", "max_timeout_ms"];
              var src_configuration = configuration_Configuration;
              function layer_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function layer_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function layer_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  layer_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  layer_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              var layer_Layer = function() {
                function Layer2(options) {
                  var _this = this;
                  layer_classCallCheck(this, Layer2);
                  this.options = {};
                  if (options != null) {
                    ["resourceType", "type", "publicId", "format"].forEach(function(key) {
                      var ref;
                      return _this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];
                    });
                  }
                }
                layer_createClass(Layer2, [{
                  key: "resourceType",
                  value: function resourceType(value) {
                    this.options.resourceType = value;
                    return this;
                  }
                }, {
                  key: "type",
                  value: function type(value) {
                    this.options.type = value;
                    return this;
                  }
                }, {
                  key: "publicId",
                  value: function publicId(value) {
                    this.options.publicId = value;
                    return this;
                  }
                  /**
                   * Get the public ID, formatted for layer parameter
                   * @function Layer#getPublicId
                   * @return {String} public ID
                   */
                }, {
                  key: "getPublicId",
                  value: function getPublicId() {
                    var ref;
                    return (ref = this.options.publicId) != null ? ref.replace(/\//g, ":") : void 0;
                  }
                  /**
                   * Get the public ID, with format if present
                   * @function Layer#getFullPublicId
                   * @return {String} public ID
                   */
                }, {
                  key: "getFullPublicId",
                  value: function getFullPublicId() {
                    if (this.options.format != null) {
                      return this.getPublicId() + "." + this.options.format;
                    } else {
                      return this.getPublicId();
                    }
                  }
                }, {
                  key: "format",
                  value: function format(value) {
                    this.options.format = value;
                    return this;
                  }
                  /**
                   * generate the string representation of the layer
                   * @function Layer#toString
                   */
                }, {
                  key: "toString",
                  value: function toString() {
                    var components;
                    components = [];
                    if (this.options.publicId == null) {
                      throw "Must supply publicId";
                    }
                    if (!(this.options.resourceType === "image")) {
                      components.push(this.options.resourceType);
                    }
                    if (!(this.options.type === "upload")) {
                      components.push(this.options.type);
                    }
                    components.push(this.getFullPublicId());
                    return compact_root_compact_default()(components).join(":");
                  }
                }, {
                  key: "clone",
                  value: function clone() {
                    return new this.constructor(this.options);
                  }
                }]);
                return Layer2;
              }();
              var layer_layer = layer_Layer;
              function textlayer_typeof(obj) {
                "@babel/helpers - typeof";
                return textlayer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, textlayer_typeof(obj);
              }
              function textlayer_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function textlayer_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function textlayer_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  textlayer_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  textlayer_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              function textlayer_inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  textlayer_setPrototypeOf(subClass, superClass);
              }
              function textlayer_setPrototypeOf(o, p) {
                textlayer_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return textlayer_setPrototypeOf(o, p);
              }
              function textlayer_createSuper(Derived) {
                var hasNativeReflectConstruct = textlayer_isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = textlayer_getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = textlayer_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return textlayer_possibleConstructorReturn(this, result);
                };
              }
              function textlayer_possibleConstructorReturn(self, call) {
                if (call && (textlayer_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return textlayer_assertThisInitialized(self);
              }
              function textlayer_assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function textlayer_isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function textlayer_getPrototypeOf(o) {
                textlayer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return textlayer_getPrototypeOf(o);
              }
              var textlayer_TextLayer = function(_Layer) {
                textlayer_inherits(TextLayer, _Layer);
                var _super = textlayer_createSuper(TextLayer);
                function TextLayer(options) {
                  var _this;
                  textlayer_classCallCheck(this, TextLayer);
                  var keys;
                  _this = _super.call(this, options);
                  keys = ["resourceType", "resourceType", "fontFamily", "fontSize", "fontWeight", "fontStyle", "textDecoration", "textAlign", "stroke", "letterSpacing", "lineSpacing", "fontHinting", "fontAntialiasing", "text", "textStyle"];
                  if (options != null) {
                    keys.forEach(function(key) {
                      var ref;
                      return _this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];
                    });
                  }
                  _this.options.resourceType = "text";
                  return _this;
                }
                textlayer_createClass(TextLayer, [{
                  key: "resourceType",
                  value: function resourceType(_resourceType) {
                    throw "Cannot modify resourceType for text layers";
                  }
                }, {
                  key: "type",
                  value: function type(_type) {
                    throw "Cannot modify type for text layers";
                  }
                }, {
                  key: "format",
                  value: function format(_format) {
                    throw "Cannot modify format for text layers";
                  }
                }, {
                  key: "fontFamily",
                  value: function fontFamily(_fontFamily) {
                    this.options.fontFamily = _fontFamily;
                    return this;
                  }
                }, {
                  key: "fontSize",
                  value: function fontSize(_fontSize) {
                    this.options.fontSize = _fontSize;
                    return this;
                  }
                }, {
                  key: "fontWeight",
                  value: function fontWeight(_fontWeight) {
                    this.options.fontWeight = _fontWeight;
                    return this;
                  }
                }, {
                  key: "fontStyle",
                  value: function fontStyle(_fontStyle) {
                    this.options.fontStyle = _fontStyle;
                    return this;
                  }
                }, {
                  key: "textDecoration",
                  value: function textDecoration(_textDecoration) {
                    this.options.textDecoration = _textDecoration;
                    return this;
                  }
                }, {
                  key: "textAlign",
                  value: function textAlign(_textAlign) {
                    this.options.textAlign = _textAlign;
                    return this;
                  }
                }, {
                  key: "stroke",
                  value: function stroke(_stroke) {
                    this.options.stroke = _stroke;
                    return this;
                  }
                }, {
                  key: "letterSpacing",
                  value: function letterSpacing(_letterSpacing) {
                    this.options.letterSpacing = _letterSpacing;
                    return this;
                  }
                }, {
                  key: "lineSpacing",
                  value: function lineSpacing(_lineSpacing) {
                    this.options.lineSpacing = _lineSpacing;
                    return this;
                  }
                }, {
                  key: "fontHinting",
                  value: function fontHinting(_fontHinting) {
                    this.options.fontHinting = _fontHinting;
                    return this;
                  }
                }, {
                  key: "fontAntialiasing",
                  value: function fontAntialiasing(_fontAntialiasing) {
                    this.options.fontAntialiasing = _fontAntialiasing;
                    return this;
                  }
                }, {
                  key: "text",
                  value: function text(_text) {
                    this.options.text = _text;
                    return this;
                  }
                }, {
                  key: "textStyle",
                  value: function textStyle(_textStyle) {
                    this.options.textStyle = _textStyle;
                    return this;
                  }
                  /**
                   * generate the string representation of the layer
                   * @function TextLayer#toString
                   * @return {String}
                   */
                }, {
                  key: "toString",
                  value: function toString() {
                    var components, hasPublicId, hasStyle, publicId, re, res, start, style, text, textSource;
                    style = this.textStyleIdentifier();
                    if (this.options.publicId != null) {
                      publicId = this.getFullPublicId();
                    }
                    if (this.options.text != null) {
                      hasPublicId = !isEmpty2(publicId);
                      hasStyle = !isEmpty2(style);
                      if (hasPublicId && hasStyle || !hasPublicId && !hasStyle) {
                        throw "Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay, but not both!";
                      }
                      re = /\$\([a-zA-Z]\w*\)/g;
                      start = 0;
                      textSource = smartEscape(this.options.text, /[,\/]/g);
                      text = "";
                      while (res = re.exec(textSource)) {
                        text += smartEscape(textSource.slice(start, res.index));
                        text += res[0];
                        start = res.index + res[0].length;
                      }
                      text += smartEscape(textSource.slice(start));
                    }
                    components = [this.options.resourceType, style, publicId, text];
                    return compact_root_compact_default()(components).join(":");
                  }
                }, {
                  key: "textStyleIdentifier",
                  value: function textStyleIdentifier() {
                    if (!isEmpty2(this.options.textStyle)) {
                      return this.options.textStyle;
                    }
                    var components;
                    components = [];
                    if (this.options.fontWeight !== "normal") {
                      components.push(this.options.fontWeight);
                    }
                    if (this.options.fontStyle !== "normal") {
                      components.push(this.options.fontStyle);
                    }
                    if (this.options.textDecoration !== "none") {
                      components.push(this.options.textDecoration);
                    }
                    components.push(this.options.textAlign);
                    if (this.options.stroke !== "none") {
                      components.push(this.options.stroke);
                    }
                    if (!(isEmpty2(this.options.letterSpacing) && !isNumberLike(this.options.letterSpacing))) {
                      components.push("letter_spacing_" + this.options.letterSpacing);
                    }
                    if (!(isEmpty2(this.options.lineSpacing) && !isNumberLike(this.options.lineSpacing))) {
                      components.push("line_spacing_" + this.options.lineSpacing);
                    }
                    if (!isEmpty2(this.options.fontAntialiasing)) {
                      components.push("antialias_" + this.options.fontAntialiasing);
                    }
                    if (!isEmpty2(this.options.fontHinting)) {
                      components.push("hinting_" + this.options.fontHinting);
                    }
                    if (!isEmpty2(compact_root_compact_default()(components))) {
                      if (isEmpty2(this.options.fontFamily)) {
                        throw "Must supply fontFamily. ".concat(components);
                      }
                      if (isEmpty2(this.options.fontSize) && !isNumberLike(this.options.fontSize)) {
                        throw "Must supply fontSize.";
                      }
                    }
                    components.unshift(this.options.fontFamily, this.options.fontSize);
                    components = compact_root_compact_default()(components).join("_");
                    return components;
                  }
                }]);
                return TextLayer;
              }(layer_layer);
              ;
              var textlayer = textlayer_TextLayer;
              function subtitleslayer_typeof(obj) {
                "@babel/helpers - typeof";
                return subtitleslayer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, subtitleslayer_typeof(obj);
              }
              function subtitleslayer_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function subtitleslayer_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  subtitleslayer_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  subtitleslayer_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              function subtitleslayer_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function subtitleslayer_inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  subtitleslayer_setPrototypeOf(subClass, superClass);
              }
              function subtitleslayer_setPrototypeOf(o, p) {
                subtitleslayer_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return subtitleslayer_setPrototypeOf(o, p);
              }
              function subtitleslayer_createSuper(Derived) {
                var hasNativeReflectConstruct = subtitleslayer_isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = subtitleslayer_getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = subtitleslayer_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return subtitleslayer_possibleConstructorReturn(this, result);
                };
              }
              function subtitleslayer_possibleConstructorReturn(self, call) {
                if (call && (subtitleslayer_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return subtitleslayer_assertThisInitialized(self);
              }
              function subtitleslayer_assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function subtitleslayer_isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function subtitleslayer_getPrototypeOf(o) {
                subtitleslayer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return subtitleslayer_getPrototypeOf(o);
              }
              var SubtitlesLayer = function(_TextLayer) {
                subtitleslayer_inherits(SubtitlesLayer2, _TextLayer);
                var _super = subtitleslayer_createSuper(SubtitlesLayer2);
                function SubtitlesLayer2(options) {
                  var _this;
                  subtitleslayer_classCallCheck(this, SubtitlesLayer2);
                  _this = _super.call(this, options);
                  _this.options.resourceType = "subtitles";
                  return _this;
                }
                return subtitleslayer_createClass(SubtitlesLayer2);
              }(textlayer);
              var subtitleslayer = SubtitlesLayer;
              function fetchlayer_typeof(obj) {
                "@babel/helpers - typeof";
                return fetchlayer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, fetchlayer_typeof(obj);
              }
              function fetchlayer_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function fetchlayer_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function fetchlayer_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  fetchlayer_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  fetchlayer_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              function fetchlayer_inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  fetchlayer_setPrototypeOf(subClass, superClass);
              }
              function fetchlayer_setPrototypeOf(o, p) {
                fetchlayer_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return fetchlayer_setPrototypeOf(o, p);
              }
              function fetchlayer_createSuper(Derived) {
                var hasNativeReflectConstruct = fetchlayer_isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = fetchlayer_getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = fetchlayer_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return fetchlayer_possibleConstructorReturn(this, result);
                };
              }
              function fetchlayer_possibleConstructorReturn(self, call) {
                if (call && (fetchlayer_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return fetchlayer_assertThisInitialized(self);
              }
              function fetchlayer_assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function fetchlayer_isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function fetchlayer_getPrototypeOf(o) {
                fetchlayer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return fetchlayer_getPrototypeOf(o);
              }
              var fetchlayer_FetchLayer = function(_Layer) {
                fetchlayer_inherits(FetchLayer, _Layer);
                var _super = fetchlayer_createSuper(FetchLayer);
                function FetchLayer(options) {
                  var _this;
                  fetchlayer_classCallCheck(this, FetchLayer);
                  _this = _super.call(this, options);
                  if (isString_root_isString_default()(options)) {
                    _this.options.url = options;
                  } else if (options != null ? options.url : void 0) {
                    _this.options.url = options.url;
                  }
                  return _this;
                }
                fetchlayer_createClass(FetchLayer, [{
                  key: "url",
                  value: function url(_url) {
                    this.options.url = _url;
                    return this;
                  }
                  /**
                   * generate the string representation of the layer
                   * @function FetchLayer#toString
                   * @return {String}
                   */
                }, {
                  key: "toString",
                  value: function toString() {
                    return "fetch:".concat(base64EncodeURL(this.options.url));
                  }
                }]);
                return FetchLayer;
              }(layer_layer);
              var fetchlayer = fetchlayer_FetchLayer;
              function parameters_typeof(obj) {
                "@babel/helpers - typeof";
                return parameters_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, parameters_typeof(obj);
              }
              function _get() {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                  _get = Reflect.get.bind();
                } else {
                  _get = function _get2(target, property, receiver) {
                    var base = _superPropBase(target, property);
                    if (!base)
                      return;
                    var desc = Object.getOwnPropertyDescriptor(base, property);
                    if (desc.get) {
                      return desc.get.call(arguments.length < 3 ? target : receiver);
                    }
                    return desc.value;
                  };
                }
                return _get.apply(this, arguments);
              }
              function _superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                  object = parameters_getPrototypeOf(object);
                  if (object === null)
                    break;
                }
                return object;
              }
              function parameters_inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  parameters_setPrototypeOf(subClass, superClass);
              }
              function parameters_setPrototypeOf(o, p) {
                parameters_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return parameters_setPrototypeOf(o, p);
              }
              function parameters_createSuper(Derived) {
                var hasNativeReflectConstruct = parameters_isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = parameters_getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = parameters_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return parameters_possibleConstructorReturn(this, result);
                };
              }
              function parameters_possibleConstructorReturn(self, call) {
                if (call && (parameters_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return parameters_assertThisInitialized(self);
              }
              function parameters_assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function parameters_isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function parameters_getPrototypeOf(o) {
                parameters_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return parameters_getPrototypeOf(o);
              }
              function parameters_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function parameters_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function parameters_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  parameters_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  parameters_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              var parameters_Param = function() {
                function Param(name, shortName) {
                  var process2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : identity_root_identity_default.a;
                  parameters_classCallCheck(this, Param);
                  this.name = name;
                  this.shortName = shortName;
                  this.process = process2;
                }
                parameters_createClass(Param, [{
                  key: "set",
                  value: function set(origValue) {
                    this.origValue = origValue;
                    return this;
                  }
                  /**
                   * Generate the serialized form of the parameter
                   * @function Param#serialize
                   * @return {string} the serialized form of the parameter
                   */
                }, {
                  key: "serialize",
                  value: function serialize() {
                    var val, valid;
                    val = this.value();
                    valid = isArray_root_isArray_default()(val) || isPlainObject_root_isPlainObject_default()(val) || isString_root_isString_default()(val) ? !isEmpty2(val) : val != null;
                    if (this.shortName != null && valid) {
                      return "".concat(this.shortName, "_").concat(val);
                    } else {
                      return "";
                    }
                  }
                  /**
                   * Return the processed value of the parameter
                   * @function Param#value
                   */
                }, {
                  key: "value",
                  value: function value() {
                    return this.process(this.origValue);
                  }
                }], [{
                  key: "norm_color",
                  value: function norm_color(value) {
                    return value != null ? value.replace(/^#/, "rgb:") : void 0;
                  }
                }, {
                  key: "build_array",
                  value: function build_array(arg) {
                    if (arg == null) {
                      return [];
                    } else if (isArray_root_isArray_default()(arg)) {
                      return arg;
                    } else {
                      return [arg];
                    }
                  }
                  /**
                  * Covert value to video codec string.
                  *
                  * If the parameter is an object,
                  * @param {(string|Object)} param - the video codec as either a String or a Hash
                  * @return {string} the video codec string in the format codec:profile:level:b_frames
                  * @example
                  * vc_[ :profile : [level : [b_frames]]]
                  * or
                    { codec: 'h264', profile: 'basic', level: '3.1', b_frames: false }
                  * @ignore
                   */
                }, {
                  key: "process_video_params",
                  value: function process_video_params(param) {
                    var video;
                    switch (param.constructor) {
                      case Object:
                        video = "";
                        if ("codec" in param) {
                          video = param.codec;
                          if ("profile" in param) {
                            video += ":" + param.profile;
                            if ("level" in param) {
                              video += ":" + param.level;
                              if ("b_frames" in param && param.b_frames === false) {
                                video += ":bframes_no";
                              }
                            }
                          }
                        }
                        return video;
                      case String:
                        return param;
                      default:
                        return null;
                    }
                  }
                }]);
                return Param;
              }();
              var parameters_ArrayParam = function(_Param) {
                parameters_inherits(ArrayParam, _Param);
                var _super = parameters_createSuper(ArrayParam);
                function ArrayParam(name, shortName) {
                  var _this;
                  var sep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
                  var process2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
                  parameters_classCallCheck(this, ArrayParam);
                  _this = _super.call(this, name, shortName, process2);
                  _this.sep = sep;
                  return _this;
                }
                parameters_createClass(ArrayParam, [{
                  key: "serialize",
                  value: function serialize() {
                    if (this.shortName != null) {
                      var arrayValue = this.value();
                      if (isEmpty2(arrayValue)) {
                        return "";
                      } else if (isString_root_isString_default()(arrayValue)) {
                        return "".concat(this.shortName, "_").concat(arrayValue);
                      } else {
                        var flat = arrayValue.map(function(t) {
                          return isFunction_root_isFunction_default()(t.serialize) ? t.serialize() : t;
                        }).join(this.sep);
                        return "".concat(this.shortName, "_").concat(flat);
                      }
                    } else {
                      return "";
                    }
                  }
                }, {
                  key: "value",
                  value: function value() {
                    var _this2 = this;
                    if (isArray_root_isArray_default()(this.origValue)) {
                      return this.origValue.map(function(v) {
                        return _this2.process(v);
                      });
                    } else {
                      return this.process(this.origValue);
                    }
                  }
                }, {
                  key: "set",
                  value: function set(origValue) {
                    if (origValue == null || isArray_root_isArray_default()(origValue)) {
                      return _get(parameters_getPrototypeOf(ArrayParam.prototype), "set", this).call(this, origValue);
                    } else {
                      return _get(parameters_getPrototypeOf(ArrayParam.prototype), "set", this).call(this, [origValue]);
                    }
                  }
                }]);
                return ArrayParam;
              }(parameters_Param);
              var parameters_TransformationParam = function(_Param2) {
                parameters_inherits(TransformationParam, _Param2);
                var _super2 = parameters_createSuper(TransformationParam);
                function TransformationParam(name) {
                  var _this3;
                  var shortName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "t";
                  var sep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
                  var process2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
                  parameters_classCallCheck(this, TransformationParam);
                  _this3 = _super2.call(this, name, shortName, process2);
                  _this3.sep = sep;
                  return _this3;
                }
                parameters_createClass(TransformationParam, [{
                  key: "serialize",
                  value: function serialize() {
                    var _this4 = this;
                    var result = "";
                    var val = this.value();
                    if (isEmpty2(val)) {
                      return result;
                    }
                    if (baseutil_allStrings(val)) {
                      var joined = val.join(this.sep);
                      if (!isEmpty2(joined)) {
                        result = "".concat(this.shortName, "_").concat(joined);
                      }
                    } else {
                      result = val.map(function(t) {
                        if (isString_root_isString_default()(t) && !isEmpty2(t)) {
                          return "".concat(_this4.shortName, "_").concat(t);
                        }
                        if (isFunction_root_isFunction_default()(t.serialize)) {
                          return t.serialize();
                        }
                        if (isPlainObject_root_isPlainObject_default()(t) && !isEmpty2(t)) {
                          return new src_transformation(t).serialize();
                        }
                        return void 0;
                      }).filter(function(t) {
                        return t;
                      });
                    }
                    return result;
                  }
                }, {
                  key: "set",
                  value: function set(origValue1) {
                    this.origValue = origValue1;
                    if (isArray_root_isArray_default()(this.origValue)) {
                      return _get(parameters_getPrototypeOf(TransformationParam.prototype), "set", this).call(this, this.origValue);
                    } else {
                      return _get(parameters_getPrototypeOf(TransformationParam.prototype), "set", this).call(this, [this.origValue]);
                    }
                  }
                }]);
                return TransformationParam;
              }(parameters_Param);
              var number_pattern = "([0-9]*)\\.([0-9]+)|([0-9]+)";
              var offset_any_pattern = "(" + number_pattern + ")([%pP])?";
              var parameters_RangeParam = function(_Param3) {
                parameters_inherits(RangeParam, _Param3);
                var _super3 = parameters_createSuper(RangeParam);
                function RangeParam(name, shortName) {
                  var process2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : RangeParam.norm_range_value;
                  parameters_classCallCheck(this, RangeParam);
                  return _super3.call(this, name, shortName, process2);
                }
                parameters_createClass(RangeParam, null, [{
                  key: "norm_range_value",
                  value: function norm_range_value(value) {
                    var offset = String(value).match(new RegExp("^" + offset_any_pattern + "$"));
                    if (offset) {
                      var modifier = offset[5] != null ? "p" : "";
                      value = (offset[1] || offset[4]) + modifier;
                    }
                    return expression.normalize(value);
                  }
                }]);
                return RangeParam;
              }(parameters_Param);
              var parameters_RawParam = function(_Param4) {
                parameters_inherits(RawParam, _Param4);
                var _super4 = parameters_createSuper(RawParam);
                function RawParam(name, shortName) {
                  var process2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : identity_root_identity_default.a;
                  parameters_classCallCheck(this, RawParam);
                  return _super4.call(this, name, shortName, process2);
                }
                parameters_createClass(RawParam, [{
                  key: "serialize",
                  value: function serialize() {
                    return this.value();
                  }
                }]);
                return RawParam;
              }(parameters_Param);
              var parameters_LayerParam = function(_Param5) {
                parameters_inherits(LayerParam, _Param5);
                var _super5 = parameters_createSuper(LayerParam);
                function LayerParam() {
                  parameters_classCallCheck(this, LayerParam);
                  return _super5.apply(this, arguments);
                }
                parameters_createClass(LayerParam, [{
                  key: "value",
                  value: (
                    // Parse layer options
                    // @return [string] layer transformation string
                    // @private
                    function value() {
                      if (this.origValue == null) {
                        return "";
                      }
                      var result;
                      if (this.origValue instanceof layer_layer) {
                        result = this.origValue;
                      } else if (isPlainObject_root_isPlainObject_default()(this.origValue)) {
                        var layerOptions = withCamelCaseKeys2(this.origValue);
                        if (layerOptions.resourceType === "text" || layerOptions.text != null) {
                          result = new textlayer(layerOptions);
                        } else if (layerOptions.resourceType === "subtitles") {
                          result = new subtitleslayer(layerOptions);
                        } else if (layerOptions.resourceType === "fetch" || layerOptions.url != null) {
                          result = new fetchlayer(layerOptions);
                        } else {
                          result = new layer_layer(layerOptions);
                        }
                      } else if (isString_root_isString_default()(this.origValue)) {
                        if (/^fetch:.+/.test(this.origValue)) {
                          result = new fetchlayer(this.origValue.substr(6));
                        } else {
                          result = this.origValue;
                        }
                      } else {
                        result = "";
                      }
                      return result.toString();
                    }
                  )
                }], [{
                  key: "textStyle",
                  value: function textStyle(layer) {
                    return new textlayer(layer).textStyleIdentifier();
                  }
                }]);
                return LayerParam;
              }(parameters_Param);
              var parameters_ExpressionParam = function(_Param6) {
                parameters_inherits(ExpressionParam, _Param6);
                var _super6 = parameters_createSuper(ExpressionParam);
                function ExpressionParam() {
                  parameters_classCallCheck(this, ExpressionParam);
                  return _super6.apply(this, arguments);
                }
                parameters_createClass(ExpressionParam, [{
                  key: "serialize",
                  value: function serialize() {
                    return expression.normalize(_get(parameters_getPrototypeOf(ExpressionParam.prototype), "serialize", this).call(this));
                  }
                }]);
                return ExpressionParam;
              }(parameters_Param);
              function transformation_typeof(obj) {
                "@babel/helpers - typeof";
                return transformation_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, transformation_typeof(obj);
              }
              function transformation_inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  transformation_setPrototypeOf(subClass, superClass);
              }
              function transformation_setPrototypeOf(o, p) {
                transformation_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return transformation_setPrototypeOf(o, p);
              }
              function transformation_createSuper(Derived) {
                var hasNativeReflectConstruct = transformation_isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = transformation_getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = transformation_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return transformation_possibleConstructorReturn(this, result);
                };
              }
              function transformation_possibleConstructorReturn(self, call) {
                if (call && (transformation_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return transformation_assertThisInitialized(self);
              }
              function transformation_assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function transformation_isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function transformation_getPrototypeOf(o) {
                transformation_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return transformation_getPrototypeOf(o);
              }
              function transformation_slicedToArray(arr, i) {
                return transformation_arrayWithHoles(arr) || transformation_iterableToArrayLimit(arr, i) || transformation_unsupportedIterableToArray(arr, i) || transformation_nonIterableRest();
              }
              function transformation_nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function transformation_unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return transformation_arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return transformation_arrayLikeToArray(o, minLen);
              }
              function transformation_arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function transformation_iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function transformation_arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function transformation_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function transformation_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function transformation_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  transformation_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  transformation_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              function assignNotNull(target) {
                for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  sources[_key - 1] = arguments[_key];
                }
                sources.forEach(function(source) {
                  Object.keys(source).forEach(function(key) {
                    if (source[key] != null) {
                      target[key] = source[key];
                    }
                  });
                });
                return target;
              }
              var transformation_TransformationBase = function() {
                function TransformationBase(options) {
                  transformation_classCallCheck(this, TransformationBase);
                  var parent, trans;
                  parent = void 0;
                  trans = {};
                  this.toOptions = function(withChain) {
                    var opt = {};
                    if (withChain == null) {
                      withChain = true;
                    }
                    Object.keys(trans).forEach(function(key) {
                      return opt[key] = trans[key].origValue;
                    });
                    assignNotNull(opt, this.otherOptions);
                    if (withChain && !isEmpty2(this.chained)) {
                      var list = this.chained.map(function(tr) {
                        return tr.toOptions();
                      });
                      list.push(opt);
                      opt = {};
                      assignNotNull(opt, this.otherOptions);
                      opt.transformation = list;
                    }
                    return opt;
                  };
                  this.setParent = function(object) {
                    parent = object;
                    if (object != null) {
                      this.fromOptions(typeof object.toOptions === "function" ? object.toOptions() : void 0);
                    }
                    return this;
                  };
                  this.getParent = function() {
                    return parent;
                  };
                  this.param = function(value, name, abbr, defaultValue, process2) {
                    if (process2 == null) {
                      if (isFunction_root_isFunction_default()(defaultValue)) {
                        process2 = defaultValue;
                      } else {
                        process2 = identity_root_identity_default.a;
                      }
                    }
                    trans[name] = new parameters_Param(name, abbr, process2).set(value);
                    return this;
                  };
                  this.rawParam = function(value, name, abbr, defaultValue, process2) {
                    process2 = lastArgCallback(arguments);
                    trans[name] = new parameters_RawParam(name, abbr, process2).set(value);
                    return this;
                  };
                  this.rangeParam = function(value, name, abbr, defaultValue, process2) {
                    process2 = lastArgCallback(arguments);
                    trans[name] = new parameters_RangeParam(name, abbr, process2).set(value);
                    return this;
                  };
                  this.arrayParam = function(value, name, abbr) {
                    var sep = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ":";
                    var defaultValue = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : [];
                    var process2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : void 0;
                    process2 = lastArgCallback(arguments);
                    trans[name] = new parameters_ArrayParam(name, abbr, sep, process2).set(value);
                    return this;
                  };
                  this.transformationParam = function(value, name, abbr) {
                    var sep = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".";
                    var defaultValue = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : void 0;
                    var process2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : void 0;
                    process2 = lastArgCallback(arguments);
                    trans[name] = new parameters_TransformationParam(name, abbr, sep, process2).set(value);
                    return this;
                  };
                  this.layerParam = function(value, name, abbr) {
                    trans[name] = new parameters_LayerParam(name, abbr).set(value);
                    return this;
                  };
                  this.getValue = function(name) {
                    var value = trans[name] && trans[name].value();
                    return value != null ? value : this.otherOptions[name];
                  };
                  this.get = function(name) {
                    return trans[name];
                  };
                  this.remove = function(name) {
                    var temp;
                    switch (false) {
                      case trans[name] == null:
                        temp = trans[name];
                        delete trans[name];
                        return temp.origValue;
                      case this.otherOptions[name] == null:
                        temp = this.otherOptions[name];
                        delete this.otherOptions[name];
                        return temp;
                      default:
                        return null;
                    }
                  };
                  this.keys = function() {
                    var key;
                    return function() {
                      var results;
                      results = [];
                      for (key in trans) {
                        if (key != null) {
                          results.push(key.match(VAR_NAME_RE) ? key : snakeCase(key));
                        }
                      }
                      return results;
                    }().sort();
                  };
                  this.toPlainObject = function() {
                    var hash, key, list;
                    hash = {};
                    for (key in trans) {
                      hash[key] = trans[key].value();
                      if (isPlainObject_root_isPlainObject_default()(hash[key])) {
                        hash[key] = cloneDeep_root_cloneDeep_default()(hash[key]);
                      }
                    }
                    if (!isEmpty2(this.chained)) {
                      list = this.chained.map(function(tr) {
                        return tr.toPlainObject();
                      });
                      list.push(hash);
                      hash = {
                        transformation: list
                      };
                    }
                    return hash;
                  };
                  this.chain = function() {
                    var names, tr;
                    names = Object.getOwnPropertyNames(trans);
                    if (names.length !== 0) {
                      tr = new this.constructor(this.toOptions(false));
                      this.resetTransformations();
                      this.chained.push(tr);
                    }
                    return this;
                  };
                  this.resetTransformations = function() {
                    trans = {};
                    return this;
                  };
                  this.otherOptions = {};
                  this.chained = [];
                  this.fromOptions(options);
                }
                transformation_createClass(TransformationBase, [{
                  key: "fromOptions",
                  value: function fromOptions() {
                    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    if (options instanceof TransformationBase) {
                      this.fromTransformation(options);
                    } else {
                      if (isString_root_isString_default()(options) || isArray_root_isArray_default()(options)) {
                        options = {
                          transformation: options
                        };
                      }
                      options = cloneDeep_root_cloneDeep_default()(options, function(value) {
                        if (value instanceof TransformationBase || value instanceof Layer) {
                          return new value.clone();
                        }
                      });
                      if (options["if"]) {
                        this.set("if", options["if"]);
                        delete options["if"];
                      }
                      for (var key in options) {
                        var opt = options[key];
                        if (opt != null) {
                          if (key.match(VAR_NAME_RE)) {
                            if (key !== "$attr") {
                              this.set("variable", key, opt);
                            }
                          } else {
                            this.set(key, opt);
                          }
                        }
                      }
                    }
                    return this;
                  }
                }, {
                  key: "fromTransformation",
                  value: function fromTransformation(other) {
                    var _this = this;
                    if (other instanceof TransformationBase) {
                      other.keys().forEach(function(key) {
                        return _this.set(key, other.get(key).origValue);
                      });
                    }
                    return this;
                  }
                  /**
                   * Set a parameter.
                   * The parameter name `key` is converted to
                   * @param {string} key - the name of the parameter
                   * @param {*} values - the value of the parameter
                   * @returns {Transformation} Returns this instance for chaining
                   */
                }, {
                  key: "set",
                  value: function set(key) {
                    var camelKey;
                    camelKey = camelCase2(key);
                    for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                      values[_key2 - 1] = arguments[_key2];
                    }
                    if (includes_root_includes_default()(transformation_Transformation.methods, camelKey)) {
                      this[camelKey].apply(this, values);
                    } else {
                      this.otherOptions[key] = values[0];
                    }
                    return this;
                  }
                }, {
                  key: "hasLayer",
                  value: function hasLayer() {
                    return this.getValue("overlay") || this.getValue("underlay");
                  }
                  /**
                   * Generate a string representation of the transformation.
                   * @function Transformation#serialize
                   * @return {string} Returns the transformation as a string
                   */
                }, {
                  key: "serialize",
                  value: function serialize() {
                    var ifParam, j, len, paramList, ref, ref1, ref2, ref3, ref4, resultArray, t, transformationList, transformationString, transformations, value, variables, vars;
                    resultArray = this.chained.map(function(tr) {
                      return tr.serialize();
                    });
                    paramList = this.keys();
                    transformations = (ref = this.get("transformation")) != null ? ref.serialize() : void 0;
                    ifParam = (ref1 = this.get("if")) != null ? ref1.serialize() : void 0;
                    variables = processVar((ref2 = this.get("variables")) != null ? ref2.value() : void 0);
                    paramList = difference_root_difference_default()(paramList, ["transformation", "if", "variables"]);
                    vars = [];
                    transformationList = [];
                    for (j = 0, len = paramList.length; j < len; j++) {
                      t = paramList[j];
                      if (t.match(VAR_NAME_RE)) {
                        vars.push(t + "_" + expression.normalize((ref3 = this.get(t)) != null ? ref3.value() : void 0));
                      } else {
                        transformationList.push((ref4 = this.get(t)) != null ? ref4.serialize() : void 0);
                      }
                    }
                    switch (false) {
                      case !isString_root_isString_default()(transformations):
                        transformationList.push(transformations);
                        break;
                      case !isArray_root_isArray_default()(transformations):
                        resultArray = resultArray.concat(transformations);
                    }
                    transformationList = function() {
                      var k, len1, results;
                      results = [];
                      for (k = 0, len1 = transformationList.length; k < len1; k++) {
                        value = transformationList[k];
                        if (isArray_root_isArray_default()(value) && !isEmpty2(value) || !isArray_root_isArray_default()(value) && value) {
                          results.push(value);
                        }
                      }
                      return results;
                    }();
                    transformationList = vars.sort().concat(variables).concat(transformationList.sort());
                    if (ifParam === "if_end") {
                      transformationList.push(ifParam);
                    } else if (!isEmpty2(ifParam)) {
                      transformationList.unshift(ifParam);
                    }
                    transformationString = compact_root_compact_default()(transformationList).join(this.param_separator);
                    if (!isEmpty2(transformationString)) {
                      resultArray.push(transformationString);
                    }
                    return compact_root_compact_default()(resultArray).join(this.trans_separator);
                  }
                  /**
                   * Provide a list of all the valid transformation option names
                   * @function Transformation#listNames
                   * @private
                   * @return {Array<string>} a array of all the valid option names
                   */
                }, {
                  key: "toHtmlAttributes",
                  value: (
                    /**
                     * Returns the attributes for an HTML tag.
                     * @function Cloudinary.toHtmlAttributes
                     * @return PlainObject
                     */
                    function toHtmlAttributes() {
                      var _this2 = this;
                      var attrName, height, options, ref2, ref3, value, width;
                      options = {};
                      var snakeCaseKey;
                      Object.keys(this.otherOptions).forEach(function(key) {
                        value = _this2.otherOptions[key];
                        snakeCaseKey = snakeCase(key);
                        if (!includes_root_includes_default()(transformation_Transformation.PARAM_NAMES, snakeCaseKey) && !includes_root_includes_default()(URL_KEYS, snakeCaseKey)) {
                          attrName = /^html_/.test(key) ? key.slice(5) : key;
                          options[attrName] = value;
                        }
                      });
                      this.keys().forEach(function(key) {
                        if (/^html_/.test(key)) {
                          options[camelCase2(key.slice(5))] = _this2.getValue(key);
                        }
                      });
                      if (!(this.hasLayer() || this.getValue("angle") || includes_root_includes_default()(["fit", "limit", "lfill"], this.getValue("crop")))) {
                        width = (ref2 = this.get("width")) != null ? ref2.origValue : void 0;
                        height = (ref3 = this.get("height")) != null ? ref3.origValue : void 0;
                        if (parseFloat(width) >= 1) {
                          if (options.width == null) {
                            options.width = width;
                          }
                        }
                        if (parseFloat(height) >= 1) {
                          if (options.height == null) {
                            options.height = height;
                          }
                        }
                      }
                      return options;
                    }
                  )
                }, {
                  key: "toHtml",
                  value: (
                    /**
                     * Delegate to the parent (up the call chain) to produce HTML
                     * @function Transformation#toHtml
                     * @return {string} HTML representation of the parent if possible.
                     * @example
                     * tag = cloudinary.ImageTag.new("sample", {cloud_name: "demo"})
                     * // ImageTag {name: "img", publicId: "sample"}
                     * tag.toHtml()
                     * // <img src="http://res.cloudinary.com/demo/image/upload/sample">
                     * tag.transformation().crop("fit").width(300).toHtml()
                     * // <img src="http://res.cloudinary.com/demo/image/upload/c_fit,w_300/sample">
                     */
                    function toHtml() {
                      var ref;
                      return (ref = this.getParent()) != null ? typeof ref.toHtml === "function" ? ref.toHtml() : void 0 : void 0;
                    }
                  )
                }, {
                  key: "toString",
                  value: function toString() {
                    return this.serialize();
                  }
                }, {
                  key: "clone",
                  value: function clone() {
                    return new this.constructor(this.toOptions(true));
                  }
                }], [{
                  key: "listNames",
                  value: function listNames() {
                    return transformation_Transformation.methods;
                  }
                }, {
                  key: "isValidParamName",
                  value: function isValidParamName(name) {
                    return transformation_Transformation.methods.indexOf(camelCase2(name)) >= 0;
                  }
                }]);
                return TransformationBase;
              }();
              var VAR_NAME_RE = /^\$[a-zA-Z0-9]+$/;
              transformation_TransformationBase.prototype.trans_separator = "/";
              transformation_TransformationBase.prototype.param_separator = ",";
              function lastArgCallback(args) {
                var callback;
                callback = args != null ? args[args.length - 1] : void 0;
                if (isFunction_root_isFunction_default()(callback)) {
                  return callback;
                } else {
                  return void 0;
                }
              }
              function processVar(varArray) {
                var j, len, name, results, v;
                if (isArray_root_isArray_default()(varArray)) {
                  results = [];
                  for (j = 0, len = varArray.length; j < len; j++) {
                    var _varArray$j = transformation_slicedToArray(varArray[j], 2);
                    name = _varArray$j[0];
                    v = _varArray$j[1];
                    results.push("".concat(name, "_").concat(expression.normalize(v)));
                  }
                  return results;
                } else {
                  return varArray;
                }
              }
              function processCustomFunction(_ref) {
                var function_type = _ref.function_type, source = _ref.source;
                if (function_type === "remote") {
                  return [function_type, btoa(source)].join(":");
                } else if (function_type === "wasm") {
                  return [function_type, source].join(":");
                }
              }
              var transformation_Transformation = function(_TransformationBase) {
                transformation_inherits(Transformation2, _TransformationBase);
                var _super = transformation_createSuper(Transformation2);
                function Transformation2(options) {
                  transformation_classCallCheck(this, Transformation2);
                  return _super.call(this, options);
                }
                transformation_createClass(Transformation2, [{
                  key: "angle",
                  value: (
                    /*
                      Transformation Parameters
                    */
                    function angle(value) {
                      return this.arrayParam(value, "angle", "a", ".", expression.normalize);
                    }
                  )
                }, {
                  key: "audioCodec",
                  value: function audioCodec(value) {
                    return this.param(value, "audio_codec", "ac");
                  }
                }, {
                  key: "audioFrequency",
                  value: function audioFrequency(value) {
                    return this.param(value, "audio_frequency", "af");
                  }
                }, {
                  key: "aspectRatio",
                  value: function aspectRatio(value) {
                    return this.param(value, "aspect_ratio", "ar", expression.normalize);
                  }
                }, {
                  key: "background",
                  value: function background(value) {
                    return this.param(value, "background", "b", parameters_Param.norm_color);
                  }
                }, {
                  key: "bitRate",
                  value: function bitRate(value) {
                    return this.param(value, "bit_rate", "br");
                  }
                }, {
                  key: "border",
                  value: function border(value) {
                    return this.param(value, "border", "bo", function(border2) {
                      if (isPlainObject_root_isPlainObject_default()(border2)) {
                        border2 = assign_root_assign_default()({}, {
                          color: "black",
                          width: 2
                        }, border2);
                        return "".concat(border2.width, "px_solid_").concat(parameters_Param.norm_color(border2.color));
                      } else {
                        return border2;
                      }
                    });
                  }
                }, {
                  key: "color",
                  value: function color(value) {
                    return this.param(value, "color", "co", parameters_Param.norm_color);
                  }
                }, {
                  key: "colorSpace",
                  value: function colorSpace(value) {
                    return this.param(value, "color_space", "cs");
                  }
                }, {
                  key: "crop",
                  value: function crop(value) {
                    return this.param(value, "crop", "c");
                  }
                }, {
                  key: "customFunction",
                  value: function customFunction(value) {
                    return this.param(value, "custom_function", "fn", function() {
                      return processCustomFunction(value);
                    });
                  }
                }, {
                  key: "customPreFunction",
                  value: function customPreFunction(value) {
                    if (this.get("custom_function")) {
                      return;
                    }
                    return this.rawParam(value, "custom_function", "", function() {
                      value = processCustomFunction(value);
                      return value ? "fn_pre:".concat(value) : value;
                    });
                  }
                }, {
                  key: "defaultImage",
                  value: function defaultImage(value) {
                    return this.param(value, "default_image", "d");
                  }
                }, {
                  key: "delay",
                  value: function delay(value) {
                    return this.param(value, "delay", "dl");
                  }
                }, {
                  key: "density",
                  value: function density(value) {
                    return this.param(value, "density", "dn");
                  }
                }, {
                  key: "duration",
                  value: function duration(value) {
                    return this.rangeParam(value, "duration", "du");
                  }
                }, {
                  key: "dpr",
                  value: function dpr(value) {
                    return this.param(value, "dpr", "dpr", function(dpr2) {
                      dpr2 = dpr2.toString();
                      if (dpr2 != null ? dpr2.match(/^\d+$/) : void 0) {
                        return dpr2 + ".0";
                      } else {
                        return expression.normalize(dpr2);
                      }
                    });
                  }
                }, {
                  key: "effect",
                  value: function effect(value) {
                    return this.arrayParam(value, "effect", "e", ":", expression.normalize);
                  }
                }, {
                  key: "else",
                  value: function _else() {
                    return this["if"]("else");
                  }
                }, {
                  key: "endIf",
                  value: function endIf() {
                    return this["if"]("end");
                  }
                }, {
                  key: "endOffset",
                  value: function endOffset(value) {
                    return this.rangeParam(value, "end_offset", "eo");
                  }
                }, {
                  key: "fallbackContent",
                  value: function fallbackContent(value) {
                    return this.param(value, "fallback_content");
                  }
                }, {
                  key: "fetchFormat",
                  value: function fetchFormat(value) {
                    return this.param(value, "fetch_format", "f");
                  }
                }, {
                  key: "format",
                  value: function format(value) {
                    return this.param(value, "format");
                  }
                }, {
                  key: "flags",
                  value: function flags(value) {
                    return this.arrayParam(value, "flags", "fl", ".");
                  }
                }, {
                  key: "gravity",
                  value: function gravity(value) {
                    return this.param(value, "gravity", "g");
                  }
                }, {
                  key: "fps",
                  value: function fps(value) {
                    return this.param(value, "fps", "fps", function(fps2) {
                      if (isString_root_isString_default()(fps2)) {
                        return fps2;
                      } else if (isArray_root_isArray_default()(fps2)) {
                        return fps2.join("-");
                      } else {
                        return fps2;
                      }
                    });
                  }
                }, {
                  key: "height",
                  value: function height(value) {
                    var _this3 = this;
                    return this.param(value, "height", "h", function() {
                      if (_this3.getValue("crop") || _this3.getValue("overlay") || _this3.getValue("underlay")) {
                        return expression.normalize(value);
                      } else {
                        return null;
                      }
                    });
                  }
                }, {
                  key: "htmlHeight",
                  value: function htmlHeight(value) {
                    return this.param(value, "html_height");
                  }
                }, {
                  key: "htmlWidth",
                  value: function htmlWidth(value) {
                    return this.param(value, "html_width");
                  }
                }, {
                  key: "if",
                  value: function _if() {
                    var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
                    var i, ifVal, j, ref, trIf, trRest;
                    switch (value) {
                      case "else":
                        this.chain();
                        return this.param(value, "if", "if");
                      case "end":
                        this.chain();
                        for (i = j = ref = this.chained.length - 1; j >= 0; i = j += -1) {
                          ifVal = this.chained[i].getValue("if");
                          if (ifVal === "end") {
                            break;
                          } else if (ifVal != null) {
                            trIf = Transformation2["new"]()["if"](ifVal);
                            this.chained[i].remove("if");
                            trRest = this.chained[i];
                            this.chained[i] = Transformation2["new"]().transformation([trIf, trRest]);
                            if (ifVal !== "else") {
                              break;
                            }
                          }
                        }
                        return this.param(value, "if", "if");
                      case "":
                        return condition["new"]().setParent(this);
                      default:
                        return this.param(value, "if", "if", function(value2) {
                          return condition["new"](value2).toString();
                        });
                    }
                  }
                }, {
                  key: "keyframeInterval",
                  value: function keyframeInterval(value) {
                    return this.param(value, "keyframe_interval", "ki");
                  }
                }, {
                  key: "ocr",
                  value: function ocr(value) {
                    return this.param(value, "ocr", "ocr");
                  }
                }, {
                  key: "offset",
                  value: function offset(value) {
                    var end_o, start_o;
                    var _ref2 = isFunction_root_isFunction_default()(value != null ? value.split : void 0) ? value.split("..") : isArray_root_isArray_default()(value) ? value : [null, null];
                    var _ref3 = transformation_slicedToArray(_ref2, 2);
                    start_o = _ref3[0];
                    end_o = _ref3[1];
                    if (start_o != null) {
                      this.startOffset(start_o);
                    }
                    if (end_o != null) {
                      return this.endOffset(end_o);
                    }
                  }
                }, {
                  key: "opacity",
                  value: function opacity(value) {
                    return this.param(value, "opacity", "o", expression.normalize);
                  }
                }, {
                  key: "overlay",
                  value: function overlay(value) {
                    return this.layerParam(value, "overlay", "l");
                  }
                }, {
                  key: "page",
                  value: function page(value) {
                    return this.param(value, "page", "pg");
                  }
                }, {
                  key: "poster",
                  value: function poster(value) {
                    return this.param(value, "poster");
                  }
                }, {
                  key: "prefix",
                  value: function prefix(value) {
                    return this.param(value, "prefix", "p");
                  }
                }, {
                  key: "quality",
                  value: function quality(value) {
                    return this.param(value, "quality", "q", expression.normalize);
                  }
                }, {
                  key: "radius",
                  value: function radius(value) {
                    return this.arrayParam(value, "radius", "r", ":", expression.normalize);
                  }
                }, {
                  key: "rawTransformation",
                  value: function rawTransformation(value) {
                    return this.rawParam(value, "raw_transformation");
                  }
                }, {
                  key: "size",
                  value: function size(value) {
                    var height, width;
                    if (isFunction_root_isFunction_default()(value != null ? value.split : void 0)) {
                      var _value$split = value.split("x");
                      var _value$split2 = transformation_slicedToArray(_value$split, 2);
                      width = _value$split2[0];
                      height = _value$split2[1];
                      this.width(width);
                      return this.height(height);
                    }
                  }
                }, {
                  key: "sourceTypes",
                  value: function sourceTypes(value) {
                    return this.param(value, "source_types");
                  }
                }, {
                  key: "sourceTransformation",
                  value: function sourceTransformation(value) {
                    return this.param(value, "source_transformation");
                  }
                }, {
                  key: "startOffset",
                  value: function startOffset(value) {
                    return this.rangeParam(value, "start_offset", "so");
                  }
                }, {
                  key: "streamingProfile",
                  value: function streamingProfile(value) {
                    return this.param(value, "streaming_profile", "sp");
                  }
                }, {
                  key: "transformation",
                  value: function transformation(value) {
                    return this.transformationParam(value, "transformation", "t");
                  }
                }, {
                  key: "underlay",
                  value: function underlay(value) {
                    return this.layerParam(value, "underlay", "u");
                  }
                }, {
                  key: "variable",
                  value: function variable(name, value) {
                    return this.param(value, name, name);
                  }
                }, {
                  key: "variables",
                  value: function variables(values) {
                    return this.arrayParam(values, "variables");
                  }
                }, {
                  key: "videoCodec",
                  value: function videoCodec(value) {
                    return this.param(value, "video_codec", "vc", parameters_Param.process_video_params);
                  }
                }, {
                  key: "videoSampling",
                  value: function videoSampling(value) {
                    return this.param(value, "video_sampling", "vs");
                  }
                }, {
                  key: "width",
                  value: function width(value) {
                    var _this4 = this;
                    return this.param(value, "width", "w", function() {
                      if (_this4.getValue("crop") || _this4.getValue("overlay") || _this4.getValue("underlay")) {
                        return expression.normalize(value);
                      } else {
                        return null;
                      }
                    });
                  }
                }, {
                  key: "x",
                  value: function x(value) {
                    return this.param(value, "x", "x", expression.normalize);
                  }
                }, {
                  key: "y",
                  value: function y(value) {
                    return this.param(value, "y", "y", expression.normalize);
                  }
                }, {
                  key: "zoom",
                  value: function zoom(value) {
                    return this.param(value, "zoom", "z", expression.normalize);
                  }
                }], [{
                  key: "new",
                  value: function _new(options) {
                    return new Transformation2(options);
                  }
                }]);
                return Transformation2;
              }(transformation_TransformationBase);
              transformation_Transformation.methods = ["angle", "audioCodec", "audioFrequency", "aspectRatio", "background", "bitRate", "border", "color", "colorSpace", "crop", "customFunction", "customPreFunction", "defaultImage", "delay", "density", "duration", "dpr", "effect", "else", "endIf", "endOffset", "fallbackContent", "fetchFormat", "format", "flags", "gravity", "fps", "height", "htmlHeight", "htmlWidth", "if", "keyframeInterval", "ocr", "offset", "opacity", "overlay", "page", "poster", "prefix", "quality", "radius", "rawTransformation", "size", "sourceTypes", "sourceTransformation", "startOffset", "streamingProfile", "transformation", "underlay", "variable", "variables", "videoCodec", "videoSampling", "width", "x", "y", "zoom"];
              transformation_Transformation.PARAM_NAMES = transformation_Transformation.methods.map(snakeCase).concat(src_configuration.CONFIG_PARAMS);
              var src_transformation = transformation_Transformation;
              function htmltag_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function htmltag_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function htmltag_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  htmltag_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  htmltag_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              var htmltag_HtmlTag = function() {
                function HtmlTag(name, publicId, options) {
                  htmltag_classCallCheck(this, HtmlTag);
                  var transformation;
                  this.name = name;
                  this.publicId = publicId;
                  if (options == null) {
                    if (isPlainObject_root_isPlainObject_default()(publicId)) {
                      options = publicId;
                      this.publicId = void 0;
                    } else {
                      options = {};
                    }
                  }
                  transformation = new src_transformation(options);
                  transformation.setParent(this);
                  this.transformation = function() {
                    return transformation;
                  };
                }
                htmltag_createClass(HtmlTag, [{
                  key: "htmlAttrs",
                  value: (
                    /**
                     * combine key and value from the `attr` to generate an HTML tag attributes string.
                     * `Transformation::toHtmlTagOptions` is used to filter out transformation and configuration keys.
                     * @protected
                     * @param {Object} attrs
                     * @return {string} the attributes in the format `'key1="value1" key2="value2"'`
                     * @ignore
                     */
                    function htmlAttrs(attrs) {
                      var key, pairs, value;
                      return pairs = function() {
                        var results;
                        results = [];
                        for (key in attrs) {
                          value = escapeQuotes(attrs[key]);
                          if (value) {
                            results.push(htmltag_toAttribute(key, value));
                          }
                        }
                        return results;
                      }().sort().join(" ");
                    }
                  )
                  /**
                   * Get all options related to this tag.
                   * @function HtmlTag#getOptions
                   * @returns {Object} the options
                   *
                   */
                }, {
                  key: "getOptions",
                  value: function getOptions() {
                    return this.transformation().toOptions();
                  }
                  /**
                   * Get the value of option `name`
                   * @function HtmlTag#getOption
                   * @param {string} name - the name of the option
                   * @returns {*} Returns the value of the option
                   *
                   */
                }, {
                  key: "getOption",
                  value: function getOption(name) {
                    return this.transformation().getValue(name);
                  }
                  /**
                   * Get the attributes of the tag.
                   * @function HtmlTag#attributes
                   * @returns {Object} attributes
                   */
                }, {
                  key: "attributes",
                  value: function attributes() {
                    var htmlAttributes = this.transformation().toHtmlAttributes();
                    Object.keys(htmlAttributes).forEach(function(key) {
                      if (isPlainObject_root_isPlainObject_default()(htmlAttributes[key])) {
                        delete htmlAttributes[key];
                      }
                    });
                    if (htmlAttributes.attributes) {
                      merge_root_merge_default()(htmlAttributes, htmlAttributes.attributes);
                      delete htmlAttributes.attributes;
                    }
                    return htmlAttributes;
                  }
                  /**
                   * Set a tag attribute named `name` to `value`
                   * @function HtmlTag#setAttr
                   * @param {string} name - the name of the attribute
                   * @param {string} value - the value of the attribute
                   */
                }, {
                  key: "setAttr",
                  value: function setAttr(name, value) {
                    this.transformation().set("html_".concat(name), value);
                    return this;
                  }
                  /**
                   * Get the value of the tag attribute `name`
                   * @function HtmlTag#getAttr
                   * @param {string} name - the name of the attribute
                   * @returns {*}
                   */
                }, {
                  key: "getAttr",
                  value: function getAttr(name) {
                    return this.attributes()["html_".concat(name)] || this.attributes()[name];
                  }
                  /**
                   * Remove the tag attributed named `name`
                   * @function HtmlTag#removeAttr
                   * @param {string} name - the name of the attribute
                   * @returns {*}
                   */
                }, {
                  key: "removeAttr",
                  value: function removeAttr(name) {
                    var ref;
                    return (ref = this.transformation().remove("html_".concat(name))) != null ? ref : this.transformation().remove(name);
                  }
                  /**
                   * @function HtmlTag#content
                   * @protected
                   * @ignore
                   */
                }, {
                  key: "content",
                  value: function content() {
                    return "";
                  }
                  /**
                   * @function HtmlTag#openTag
                   * @protected
                   * @ignore
                   */
                }, {
                  key: "openTag",
                  value: function openTag() {
                    var tag = "<" + this.name;
                    var htmlAttrs = this.htmlAttrs(this.attributes());
                    if (htmlAttrs && htmlAttrs.length > 0) {
                      tag += " " + htmlAttrs;
                    }
                    return tag + ">";
                  }
                  /**
                   * @function HtmlTag#closeTag
                   * @protected
                   * @ignore
                   */
                }, {
                  key: "closeTag",
                  value: function closeTag() {
                    return "</".concat(this.name, ">");
                  }
                  /**
                   * Generates an HTML representation of the tag.
                   * @function HtmlTag#toHtml
                   * @returns {string} Returns HTML in string format
                   */
                }, {
                  key: "toHtml",
                  value: function toHtml() {
                    return this.openTag() + this.content() + this.closeTag();
                  }
                  /**
                   * Creates a DOM object representing the tag.
                   * @function HtmlTag#toDOM
                   * @returns {Element}
                   */
                }, {
                  key: "toDOM",
                  value: function toDOM() {
                    var element, name, ref, value;
                    if (!isFunction_root_isFunction_default()(typeof document !== "undefined" && document !== null ? document.createElement : void 0)) {
                      throw "Can't create DOM if document is not present!";
                    }
                    element = document.createElement(this.name);
                    ref = this.attributes();
                    for (name in ref) {
                      value = ref[name];
                      element.setAttribute(name, value);
                    }
                    return element;
                  }
                }], [{
                  key: "new",
                  value: function _new(name, publicId, options) {
                    return new this(name, publicId, options);
                  }
                }, {
                  key: "isResponsive",
                  value: function isResponsive(tag, responsiveClass) {
                    var dataSrc;
                    dataSrc = lodash_getData(tag, "src-cache") || lodash_getData(tag, "src");
                    return lodash_hasClass(tag, responsiveClass) && /\bw_auto\b/.exec(dataSrc);
                  }
                }]);
                return HtmlTag;
              }();
              ;
              function htmltag_toAttribute(key, value) {
                if (!value) {
                  return void 0;
                } else if (value === true) {
                  return key;
                } else {
                  return "".concat(key, '="').concat(value, '"');
                }
              }
              function escapeQuotes(value) {
                return isString_root_isString_default()(value) ? value.replace('"', "&#34;").replace("'", "&#39;") : value;
              }
              var htmltag = htmltag_HtmlTag;
              var _excluded5 = ["placeholder", "accessibility"];
              function _objectWithoutProperties(source, excluded) {
                if (source == null)
                  return {};
                var target = _objectWithoutPropertiesLoose2(source, excluded);
                var key, i;
                if (Object.getOwnPropertySymbols) {
                  var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                  for (i = 0; i < sourceSymbolKeys.length; i++) {
                    key = sourceSymbolKeys[i];
                    if (excluded.indexOf(key) >= 0)
                      continue;
                    if (!Object.prototype.propertyIsEnumerable.call(source, key))
                      continue;
                    target[key] = source[key];
                  }
                }
                return target;
              }
              function _objectWithoutPropertiesLoose2(source, excluded) {
                if (source == null)
                  return {};
                var target = {};
                var sourceKeys = Object.keys(source);
                var key, i;
                for (i = 0; i < sourceKeys.length; i++) {
                  key = sourceKeys[i];
                  if (excluded.indexOf(key) >= 0)
                    continue;
                  target[key] = source[key];
                }
                return target;
              }
              function makeUrl(str) {
                var prefix = document.location.protocol + "//" + document.location.host;
                if (str[0] === "?") {
                  prefix += document.location.pathname;
                } else if (str[0] !== "/") {
                  prefix += document.location.pathname.replace(/\/[^\/]*$/, "/");
                }
                return prefix + str;
              }
              function isUrl(str) {
                return str ? !!str.match(/^https?:\//) : false;
              }
              function cdnSubdomainNumber(publicId) {
                return src_crc32(publicId) % 5 + 1;
              }
              function handleSignature(options) {
                var signature = options.signature;
                var isFormatted = !signature || signature.indexOf("s--") === 0 && signature.substr(-2) === "--";
                delete options.signature;
                return isFormatted ? signature : "s--".concat(signature, "--");
              }
              function handlePrefix(publicId, options) {
                if (options.cloud_name && options.cloud_name[0] === "/") {
                  return "/res" + options.cloud_name;
                }
                var protocol = "http://";
                var cdnPart = "";
                var subdomain = "res";
                var host = ".cloudinary.com";
                var path = "/" + options.cloud_name;
                if (options.protocol) {
                  protocol = options.protocol + "//";
                }
                if (options.private_cdn) {
                  cdnPart = options.cloud_name + "-";
                  path = "";
                }
                if (options.cdn_subdomain) {
                  subdomain = "res-" + cdnSubdomainNumber(publicId);
                }
                if (options.secure) {
                  protocol = "https://";
                  if (options.secure_cdn_subdomain === false) {
                    subdomain = "res";
                  }
                  if (options.secure_distribution != null && options.secure_distribution !== OLD_AKAMAI_SHARED_CDN && options.secure_distribution !== SHARED_CDN) {
                    cdnPart = "";
                    subdomain = "";
                    host = options.secure_distribution;
                  }
                } else if (options.cname) {
                  protocol = "http://";
                  cdnPart = "";
                  subdomain = options.cdn_subdomain ? "a" + (src_crc32(publicId) % 5 + 1) + "." : "";
                  host = options.cname;
                }
                return [protocol, cdnPart, subdomain, host, path].join("");
              }
              function handleResourceType(_ref) {
                var _ref$resource_type = _ref.resource_type, resource_type = _ref$resource_type === void 0 ? "image" : _ref$resource_type, _ref$type = _ref.type, type = _ref$type === void 0 ? "upload" : _ref$type, url_suffix = _ref.url_suffix, use_root_path = _ref.use_root_path, shorten = _ref.shorten;
                var options, resourceType = resource_type;
                if (isPlainObject_root_isPlainObject_default()(resourceType)) {
                  options = resourceType;
                  resourceType = options.resource_type;
                  type = options.type;
                  shorten = options.shorten;
                }
                if (type == null) {
                  type = "upload";
                }
                if (url_suffix != null) {
                  resourceType = SEO_TYPES["".concat(resourceType, "/").concat(type)];
                  type = null;
                  if (resourceType == null) {
                    throw new Error("URL Suffix only supported for ".concat(Object.keys(SEO_TYPES).join(", ")));
                  }
                }
                if (use_root_path) {
                  if (resourceType === "image" && type === "upload" || resourceType === "images") {
                    resourceType = null;
                    type = null;
                  } else {
                    throw new Error("Root path only supported for image/upload");
                  }
                }
                if (shorten && resourceType === "image" && type === "upload") {
                  resourceType = "iu";
                  type = null;
                }
                return [resourceType, type].join("/");
              }
              function encodePublicId(publicId) {
                return encodeURIComponent(publicId).replace(/%3A/g, ":").replace(/%2F/g, "/");
              }
              function formatPublicId(publicId, options) {
                if (isUrl(publicId)) {
                  publicId = encodePublicId(publicId);
                } else {
                  try {
                    publicId = decodeURIComponent(publicId);
                  } catch (error) {
                  }
                  publicId = encodePublicId(publicId);
                  if (options.url_suffix) {
                    publicId = publicId + "/" + options.url_suffix;
                  }
                  if (options.format) {
                    if (!options.trust_public_id) {
                      publicId = publicId.replace(/\.(jpg|png|gif|webp)$/, "");
                    }
                    publicId = publicId + "." + options.format;
                  }
                }
                return publicId;
              }
              function validate(options) {
                var cloud_name = options.cloud_name, url_suffix = options.url_suffix;
                if (!cloud_name) {
                  return "Unknown cloud_name";
                }
                if (url_suffix && url_suffix.match(/[\.\/]/)) {
                  return "url_suffix should not include . or /";
                }
              }
              function handleVersion(publicId, options) {
                var isForceVersion = options.force_version || typeof options.force_version === "undefined";
                var isVersionExist = publicId.indexOf("/") < 0 || publicId.match(/^v[0-9]+/) || isUrl(publicId) || options.version;
                if (isForceVersion && !isVersionExist) {
                  options.version = 1;
                }
                return options.version ? "v".concat(options.version) : "";
              }
              function handleTransformation(options) {
                var _ref2 = options || {}, placeholder = _ref2.placeholder, accessibility = _ref2.accessibility, otherOptions = _objectWithoutProperties(_ref2, _excluded5);
                var result = new src_transformation(otherOptions);
                if (accessibility && ACCESSIBILITY_MODES[accessibility]) {
                  result.chain().effect(ACCESSIBILITY_MODES[accessibility]);
                }
                if (placeholder) {
                  if (placeholder === "predominant-color" && result.getValue("width") && result.getValue("height")) {
                    placeholder += "-pixel";
                  }
                  var placeholderTransformations = PLACEHOLDER_IMAGE_MODES[placeholder] || PLACEHOLDER_IMAGE_MODES.blur;
                  placeholderTransformations.forEach(function(t) {
                    return result.chain().transformation(t);
                  });
                }
                return result.serialize();
              }
              function preparePublicId(publicId, _ref3) {
                var type = _ref3.type;
                return !isUrl(publicId) && type === "fetch" ? makeUrl(publicId) : publicId;
              }
              function urlString(publicId, options) {
                if (isUrl(publicId) && (options.type === "upload" || options.type === "asset")) {
                  return publicId;
                }
                var version = handleVersion(publicId, options);
                var transformationString = handleTransformation(options);
                var prefix = handlePrefix(publicId, options);
                var signature = handleSignature(options);
                var resourceType = handleResourceType(options);
                publicId = formatPublicId(publicId, options);
                return compact_root_compact_default()([prefix, resourceType, signature, transformationString, version, publicId]).join("/").replace(/([^:])\/+/g, "$1/").replace(" ", "%20");
              }
              function prepareOptions(options, config) {
                if (options instanceof src_transformation) {
                  options = options.toOptions();
                }
                options = defaults({}, options, config, DEFAULT_IMAGE_PARAMS);
                if (options.type === "fetch") {
                  options.fetch_format = options.fetch_format || options.format;
                }
                return options;
              }
              function url_url(publicId) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                var config = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                if (!publicId) {
                  return publicId;
                }
                options = prepareOptions(options, config);
                publicId = preparePublicId(publicId, options);
                var error = validate(options);
                if (error) {
                  throw error;
                }
                var resultUrl = urlString(publicId, options);
                if (options.urlAnalytics) {
                  var analyticsOptions = getAnalyticsOptions(options);
                  var sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions);
                  var appender = "?";
                  if (resultUrl.indexOf("?") >= 0) {
                    appender = "&";
                  }
                  resultUrl = "".concat(resultUrl).concat(appender, "_a=").concat(sdkAnalyticsSignature);
                }
                if (options.auth_token) {
                  var _appender = resultUrl.indexOf("?") >= 0 ? "&" : "?";
                  resultUrl = "".concat(resultUrl).concat(_appender, "__cld_token__=").concat(options.auth_token);
                }
                return resultUrl;
              }
              ;
              function generateBreakpoints_slicedToArray(arr, i) {
                return generateBreakpoints_arrayWithHoles(arr) || generateBreakpoints_iterableToArrayLimit(arr, i) || generateBreakpoints_unsupportedIterableToArray(arr, i) || generateBreakpoints_nonIterableRest();
              }
              function generateBreakpoints_nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function generateBreakpoints_unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return generateBreakpoints_arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return generateBreakpoints_arrayLikeToArray(o, minLen);
              }
              function generateBreakpoints_arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function generateBreakpoints_iterableToArrayLimit(arr, i) {
                var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                if (_i == null)
                  return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _s, _e;
                try {
                  for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                      break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"] != null)
                      _i["return"]();
                  } finally {
                    if (_d)
                      throw _e;
                  }
                }
                return _arr;
              }
              function generateBreakpoints_arrayWithHoles(arr) {
                if (Array.isArray(arr))
                  return arr;
              }
              function generateBreakpoints(srcset) {
                var breakpoints = srcset.breakpoints || [];
                if (breakpoints.length) {
                  return breakpoints;
                }
                var _map = [srcset.min_width, srcset.max_width, srcset.max_images].map(Number), _map2 = generateBreakpoints_slicedToArray(_map, 3), min_width = _map2[0], max_width = _map2[1], max_images = _map2[2];
                if ([min_width, max_width, max_images].some(isNaN)) {
                  throw "Either (min_width, max_width, max_images) or breakpoints must be provided to the image srcset attribute";
                }
                if (min_width > max_width) {
                  throw "min_width must be less than max_width";
                }
                if (max_images <= 0) {
                  throw "max_images must be a positive integer";
                } else if (max_images === 1) {
                  min_width = max_width;
                }
                var stepSize = Math.ceil((max_width - min_width) / Math.max(max_images - 1, 1));
                for (var current = min_width; current < max_width; current += stepSize) {
                  breakpoints.push(current);
                }
                breakpoints.push(max_width);
                return breakpoints;
              }
              var srcsetUtils_isEmpty = isEmpty2;
              function scaledUrl(public_id, width, transformation) {
                var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                var configParams = extractUrlParams(options);
                transformation = transformation || options;
                configParams.raw_transformation = new src_transformation([merge_root_merge_default.a({}, transformation), {
                  crop: "scale",
                  width
                }]).toString();
                return url_url(public_id, configParams);
              }
              function getOrGenerateBreakpoints(public_id) {
                var srcset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                return generateBreakpoints(srcset);
              }
              function generateSrcsetAttribute(public_id, breakpoints, transformation, options) {
                options = cloneDeep_root_cloneDeep_default.a(options);
                patchFetchFormat(options);
                return breakpoints.map(function(width) {
                  return "".concat(scaledUrl(public_id, width, transformation, options), " ").concat(width, "w");
                }).join(", ");
              }
              function generateSizesAttribute(breakpoints) {
                if (breakpoints == null) {
                  return "";
                }
                return breakpoints.map(function(width) {
                  return "(max-width: ".concat(width, "px) ").concat(width, "px");
                }).join(", ");
              }
              function generateImageResponsiveAttributes(publicId) {
                var attributes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                var srcsetData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                var responsiveAttributes = {};
                if (srcsetUtils_isEmpty(srcsetData)) {
                  return responsiveAttributes;
                }
                var generateSizes = !attributes.sizes && srcsetData.sizes === true;
                var generateSrcset = !attributes.srcset;
                if (generateSrcset || generateSizes) {
                  var breakpoints = getOrGenerateBreakpoints(publicId, srcsetData, options);
                  if (generateSrcset) {
                    var transformation = srcsetData.transformation;
                    var srcsetAttr = generateSrcsetAttribute(publicId, breakpoints, transformation, options);
                    if (!srcsetUtils_isEmpty(srcsetAttr)) {
                      responsiveAttributes.srcset = srcsetAttr;
                    }
                  }
                  if (generateSizes) {
                    var sizesAttr = generateSizesAttribute(breakpoints);
                    if (!srcsetUtils_isEmpty(sizesAttr)) {
                      responsiveAttributes.sizes = sizesAttr;
                    }
                  }
                }
                return responsiveAttributes;
              }
              function generateMediaAttr(options) {
                var mediaQuery = [];
                if (options != null) {
                  if (options.min_width != null) {
                    mediaQuery.push("(min-width: ".concat(options.min_width, "px)"));
                  }
                  if (options.max_width != null) {
                    mediaQuery.push("(max-width: ".concat(options.max_width, "px)"));
                  }
                }
                return mediaQuery.join(" and ");
              }
              var srcsetUrl = scaledUrl;
              function imagetag_typeof(obj) {
                "@babel/helpers - typeof";
                return imagetag_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, imagetag_typeof(obj);
              }
              function imagetag_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function imagetag_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function imagetag_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  imagetag_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  imagetag_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              function imagetag_get() {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                  imagetag_get = Reflect.get.bind();
                } else {
                  imagetag_get = function _get2(target, property, receiver) {
                    var base = imagetag_superPropBase(target, property);
                    if (!base)
                      return;
                    var desc = Object.getOwnPropertyDescriptor(base, property);
                    if (desc.get) {
                      return desc.get.call(arguments.length < 3 ? target : receiver);
                    }
                    return desc.value;
                  };
                }
                return imagetag_get.apply(this, arguments);
              }
              function imagetag_superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                  object = imagetag_getPrototypeOf(object);
                  if (object === null)
                    break;
                }
                return object;
              }
              function imagetag_inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  imagetag_setPrototypeOf(subClass, superClass);
              }
              function imagetag_setPrototypeOf(o, p) {
                imagetag_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return imagetag_setPrototypeOf(o, p);
              }
              function imagetag_createSuper(Derived) {
                var hasNativeReflectConstruct = imagetag_isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = imagetag_getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = imagetag_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return imagetag_possibleConstructorReturn(this, result);
                };
              }
              function imagetag_possibleConstructorReturn(self, call) {
                if (call && (imagetag_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return imagetag_assertThisInitialized(self);
              }
              function imagetag_assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function imagetag_isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function imagetag_getPrototypeOf(o) {
                imagetag_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return imagetag_getPrototypeOf(o);
              }
              var imagetag_ImageTag = function(_HtmlTag) {
                imagetag_inherits(ImageTag, _HtmlTag);
                var _super = imagetag_createSuper(ImageTag);
                function ImageTag(publicId) {
                  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  imagetag_classCallCheck(this, ImageTag);
                  return _super.call(this, "img", publicId, options);
                }
                imagetag_createClass(ImageTag, [{
                  key: "closeTag",
                  value: function closeTag() {
                    return "";
                  }
                  /** @override */
                }, {
                  key: "attributes",
                  value: function attributes() {
                    var attr, options, srcAttribute;
                    attr = imagetag_get(imagetag_getPrototypeOf(ImageTag.prototype), "attributes", this).call(this) || {};
                    options = this.getOptions();
                    var attributes2 = this.getOption("attributes") || {};
                    var srcsetParam = this.getOption("srcset") || attributes2.srcset;
                    var responsiveAttributes = {};
                    if (isString_root_isString_default()(srcsetParam)) {
                      responsiveAttributes.srcset = srcsetParam;
                    } else {
                      responsiveAttributes = generateImageResponsiveAttributes(this.publicId, attributes2, srcsetParam, options);
                    }
                    if (!isEmpty2(responsiveAttributes)) {
                      delete attr.width;
                      delete attr.height;
                    }
                    merge_root_merge_default()(attr, responsiveAttributes);
                    srcAttribute = options.responsive && !options.client_hints ? "data-src" : "src";
                    if (attr[srcAttribute] == null) {
                      attr[srcAttribute] = url_url(this.publicId, this.getOptions());
                    }
                    return attr;
                  }
                }]);
                return ImageTag;
              }(htmltag);
              ;
              var imagetag = imagetag_ImageTag;
              function sourcetag_typeof(obj) {
                "@babel/helpers - typeof";
                return sourcetag_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, sourcetag_typeof(obj);
              }
              function sourcetag_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function sourcetag_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function sourcetag_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  sourcetag_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  sourcetag_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              function sourcetag_get() {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                  sourcetag_get = Reflect.get.bind();
                } else {
                  sourcetag_get = function _get2(target, property, receiver) {
                    var base = sourcetag_superPropBase(target, property);
                    if (!base)
                      return;
                    var desc = Object.getOwnPropertyDescriptor(base, property);
                    if (desc.get) {
                      return desc.get.call(arguments.length < 3 ? target : receiver);
                    }
                    return desc.value;
                  };
                }
                return sourcetag_get.apply(this, arguments);
              }
              function sourcetag_superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                  object = sourcetag_getPrototypeOf(object);
                  if (object === null)
                    break;
                }
                return object;
              }
              function sourcetag_inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  sourcetag_setPrototypeOf(subClass, superClass);
              }
              function sourcetag_setPrototypeOf(o, p) {
                sourcetag_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return sourcetag_setPrototypeOf(o, p);
              }
              function sourcetag_createSuper(Derived) {
                var hasNativeReflectConstruct = sourcetag_isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = sourcetag_getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = sourcetag_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return sourcetag_possibleConstructorReturn(this, result);
                };
              }
              function sourcetag_possibleConstructorReturn(self, call) {
                if (call && (sourcetag_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return sourcetag_assertThisInitialized(self);
              }
              function sourcetag_assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function sourcetag_isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function sourcetag_getPrototypeOf(o) {
                sourcetag_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return sourcetag_getPrototypeOf(o);
              }
              var sourcetag_SourceTag = function(_HtmlTag) {
                sourcetag_inherits(SourceTag, _HtmlTag);
                var _super = sourcetag_createSuper(SourceTag);
                function SourceTag(publicId) {
                  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  sourcetag_classCallCheck(this, SourceTag);
                  return _super.call(this, "source", publicId, options);
                }
                sourcetag_createClass(SourceTag, [{
                  key: "closeTag",
                  value: function closeTag() {
                    return "";
                  }
                  /** @override */
                }, {
                  key: "attributes",
                  value: function attributes() {
                    var srcsetParam = this.getOption("srcset");
                    var attr = sourcetag_get(sourcetag_getPrototypeOf(SourceTag.prototype), "attributes", this).call(this) || {};
                    var options = this.getOptions();
                    merge_root_merge_default()(attr, generateImageResponsiveAttributes(this.publicId, attr, srcsetParam, options));
                    if (!attr.srcset) {
                      attr.srcset = url_url(this.publicId, options);
                    }
                    if (!attr.media && options.media) {
                      attr.media = generateMediaAttr(options.media);
                    }
                    return attr;
                  }
                }]);
                return SourceTag;
              }(htmltag);
              ;
              var sourcetag = sourcetag_SourceTag;
              function picturetag_typeof(obj) {
                "@babel/helpers - typeof";
                return picturetag_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, picturetag_typeof(obj);
              }
              function picturetag_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function picturetag_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function picturetag_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  picturetag_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  picturetag_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              function picturetag_get() {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                  picturetag_get = Reflect.get.bind();
                } else {
                  picturetag_get = function _get2(target, property, receiver) {
                    var base = picturetag_superPropBase(target, property);
                    if (!base)
                      return;
                    var desc = Object.getOwnPropertyDescriptor(base, property);
                    if (desc.get) {
                      return desc.get.call(arguments.length < 3 ? target : receiver);
                    }
                    return desc.value;
                  };
                }
                return picturetag_get.apply(this, arguments);
              }
              function picturetag_superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                  object = picturetag_getPrototypeOf(object);
                  if (object === null)
                    break;
                }
                return object;
              }
              function picturetag_inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  picturetag_setPrototypeOf(subClass, superClass);
              }
              function picturetag_setPrototypeOf(o, p) {
                picturetag_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return picturetag_setPrototypeOf(o, p);
              }
              function picturetag_createSuper(Derived) {
                var hasNativeReflectConstruct = picturetag_isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = picturetag_getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = picturetag_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return picturetag_possibleConstructorReturn(this, result);
                };
              }
              function picturetag_possibleConstructorReturn(self, call) {
                if (call && (picturetag_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return picturetag_assertThisInitialized(self);
              }
              function picturetag_assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function picturetag_isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function picturetag_getPrototypeOf(o) {
                picturetag_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return picturetag_getPrototypeOf(o);
              }
              var picturetag_PictureTag = function(_HtmlTag) {
                picturetag_inherits(PictureTag, _HtmlTag);
                var _super = picturetag_createSuper(PictureTag);
                function PictureTag(publicId) {
                  var _this;
                  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  var sources = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
                  picturetag_classCallCheck(this, PictureTag);
                  _this = _super.call(this, "picture", publicId, options);
                  _this.widthList = sources;
                  return _this;
                }
                picturetag_createClass(PictureTag, [{
                  key: "content",
                  value: function content() {
                    var _this2 = this;
                    return this.widthList.map(function(_ref) {
                      var min_width = _ref.min_width, max_width = _ref.max_width, transformation = _ref.transformation;
                      var options = _this2.getOptions();
                      var sourceTransformation = new src_transformation(options);
                      sourceTransformation.chain().fromOptions(typeof transformation === "string" ? {
                        raw_transformation: transformation
                      } : transformation);
                      options = extractUrlParams(options);
                      options.media = {
                        min_width,
                        max_width
                      };
                      options.transformation = sourceTransformation;
                      return new sourcetag(_this2.publicId, options).toHtml();
                    }).join("") + new imagetag(this.publicId, this.getOptions()).toHtml();
                  }
                  /** @override */
                }, {
                  key: "attributes",
                  value: function attributes() {
                    var attr = picturetag_get(picturetag_getPrototypeOf(PictureTag.prototype), "attributes", this).call(this);
                    delete attr.width;
                    delete attr.height;
                    return attr;
                  }
                  /** @override */
                }, {
                  key: "closeTag",
                  value: function closeTag() {
                    return "</" + this.name + ">";
                  }
                }]);
                return PictureTag;
              }(htmltag);
              ;
              var picturetag = picturetag_PictureTag;
              function videotag_typeof(obj) {
                "@babel/helpers - typeof";
                return videotag_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, videotag_typeof(obj);
              }
              function videotag_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function videotag_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function videotag_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  videotag_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  videotag_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              function videotag_get() {
                if (typeof Reflect !== "undefined" && Reflect.get) {
                  videotag_get = Reflect.get.bind();
                } else {
                  videotag_get = function _get2(target, property, receiver) {
                    var base = videotag_superPropBase(target, property);
                    if (!base)
                      return;
                    var desc = Object.getOwnPropertyDescriptor(base, property);
                    if (desc.get) {
                      return desc.get.call(arguments.length < 3 ? target : receiver);
                    }
                    return desc.value;
                  };
                }
                return videotag_get.apply(this, arguments);
              }
              function videotag_superPropBase(object, property) {
                while (!Object.prototype.hasOwnProperty.call(object, property)) {
                  object = videotag_getPrototypeOf(object);
                  if (object === null)
                    break;
                }
                return object;
              }
              function videotag_inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  videotag_setPrototypeOf(subClass, superClass);
              }
              function videotag_setPrototypeOf(o, p) {
                videotag_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return videotag_setPrototypeOf(o, p);
              }
              function videotag_createSuper(Derived) {
                var hasNativeReflectConstruct = videotag_isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = videotag_getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = videotag_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return videotag_possibleConstructorReturn(this, result);
                };
              }
              function videotag_possibleConstructorReturn(self, call) {
                if (call && (videotag_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return videotag_assertThisInitialized(self);
              }
              function videotag_assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function videotag_isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function videotag_getPrototypeOf(o) {
                videotag_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return videotag_getPrototypeOf(o);
              }
              var VIDEO_TAG_PARAMS = ["source_types", "source_transformation", "fallback_content", "poster", "sources"];
              var videotag_DEFAULT_VIDEO_SOURCE_TYPES = ["webm", "mp4", "ogv"];
              var videotag_DEFAULT_POSTER_OPTIONS = {
                format: "jpg",
                resource_type: "video"
              };
              var videotag_VideoTag = function(_HtmlTag) {
                videotag_inherits(VideoTag, _HtmlTag);
                var _super = videotag_createSuper(VideoTag);
                function VideoTag(publicId) {
                  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  videotag_classCallCheck(this, VideoTag);
                  options = defaults({}, options, DEFAULT_VIDEO_PARAMS);
                  return _super.call(this, "video", publicId.replace(/\.(mp4|ogv|webm)$/, ""), options);
                }
                videotag_createClass(VideoTag, [{
                  key: "setSourceTransformation",
                  value: function setSourceTransformation(value) {
                    this.transformation().sourceTransformation(value);
                    return this;
                  }
                  /**
                   * Set the source types to include in the video tag
                   * @function VideoTag#setSourceTypes
                   * @param {Array<string>} an array of source types
                   * @returns {VideoTag} Returns this instance for chaining purposes.
                   */
                }, {
                  key: "setSourceTypes",
                  value: function setSourceTypes(value) {
                    this.transformation().sourceTypes(value);
                    return this;
                  }
                  /**
                   * Set the poster to be used in the video tag
                   * @function VideoTag#setPoster
                   * @param {string|Object} value
                   * - string: a URL to use for the poster
                   * - Object: transformation parameters to apply to the poster. May optionally include a public_id to use instead of the video public_id.
                   * @returns {VideoTag} Returns this instance for chaining purposes.
                   */
                }, {
                  key: "setPoster",
                  value: function setPoster(value) {
                    this.transformation().poster(value);
                    return this;
                  }
                  /**
                   * Set the content to use as fallback in the video tag
                   * @function VideoTag#setFallbackContent
                   * @param {string} value - the content to use, in HTML format
                   * @returns {VideoTag} Returns this instance for chaining purposes.
                   */
                }, {
                  key: "setFallbackContent",
                  value: function setFallbackContent(value) {
                    this.transformation().fallbackContent(value);
                    return this;
                  }
                }, {
                  key: "content",
                  value: function content() {
                    var _this = this;
                    var sourceTypes = this.transformation().getValue("source_types");
                    var sourceTransformation = this.transformation().getValue("source_transformation");
                    var fallback = this.transformation().getValue("fallback_content");
                    var sources = this.getOption("sources");
                    var innerTags = [];
                    if (isArray_root_isArray_default()(sources) && !isEmpty2(sources)) {
                      innerTags = sources.map(function(source) {
                        var src = url_url(_this.publicId, defaults({}, source.transformations || {}, {
                          resource_type: "video",
                          format: source.type
                        }), _this.getOptions());
                        return _this.createSourceTag(src, source.type, source.codecs);
                      });
                    } else {
                      if (isEmpty2(sourceTypes)) {
                        sourceTypes = videotag_DEFAULT_VIDEO_SOURCE_TYPES;
                      }
                      if (isArray_root_isArray_default()(sourceTypes)) {
                        innerTags = sourceTypes.map(function(srcType) {
                          var src = url_url(_this.publicId, defaults({}, sourceTransformation[srcType] || {}, {
                            resource_type: "video",
                            format: srcType
                          }), _this.getOptions());
                          return _this.createSourceTag(src, srcType);
                        });
                      }
                    }
                    return innerTags.join("") + fallback;
                  }
                }, {
                  key: "attributes",
                  value: function attributes() {
                    var sourceTypes = this.getOption("source_types");
                    var poster = this.getOption("poster");
                    if (poster === void 0) {
                      poster = {};
                    }
                    if (isPlainObject_root_isPlainObject_default()(poster)) {
                      var defaultOptions = poster.public_id != null ? DEFAULT_IMAGE_PARAMS : videotag_DEFAULT_POSTER_OPTIONS;
                      poster = url_url(poster.public_id || this.publicId, defaults({}, poster, defaultOptions, this.getOptions()));
                    }
                    var attr = videotag_get(videotag_getPrototypeOf(VideoTag.prototype), "attributes", this).call(this) || {};
                    attr = omit(attr, VIDEO_TAG_PARAMS);
                    var sources = this.getOption("sources");
                    var hasSourceTags = !isEmpty2(sources) || isEmpty2(sourceTypes) || isArray_root_isArray_default()(sourceTypes);
                    if (!hasSourceTags) {
                      attr["src"] = url_url(this.publicId, this.getOptions(), {
                        resource_type: "video",
                        format: sourceTypes
                      });
                    }
                    if (poster != null) {
                      attr["poster"] = poster;
                    }
                    return attr;
                  }
                }, {
                  key: "createSourceTag",
                  value: function createSourceTag(src, sourceType) {
                    var codecs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
                    var mimeType = null;
                    if (!isEmpty2(sourceType)) {
                      var videoType = sourceType === "ogv" ? "ogg" : sourceType;
                      mimeType = "video/" + videoType;
                      if (!isEmpty2(codecs)) {
                        var codecsStr = isArray_root_isArray_default()(codecs) ? codecs.join(", ") : codecs;
                        mimeType += "; codecs=" + codecsStr;
                      }
                    }
                    return "<source " + this.htmlAttrs({
                      src,
                      type: mimeType
                    }) + ">";
                  }
                }]);
                return VideoTag;
              }(htmltag);
              var videotag = videotag_VideoTag;
              function clienthintsmetatag_typeof(obj) {
                "@babel/helpers - typeof";
                return clienthintsmetatag_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                  return typeof obj2;
                } : function(obj2) {
                  return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                }, clienthintsmetatag_typeof(obj);
              }
              function clienthintsmetatag_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function clienthintsmetatag_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function clienthintsmetatag_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  clienthintsmetatag_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  clienthintsmetatag_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              function clienthintsmetatag_inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                Object.defineProperty(subClass, "prototype", { writable: false });
                if (superClass)
                  clienthintsmetatag_setPrototypeOf(subClass, superClass);
              }
              function clienthintsmetatag_setPrototypeOf(o, p) {
                clienthintsmetatag_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return clienthintsmetatag_setPrototypeOf(o, p);
              }
              function clienthintsmetatag_createSuper(Derived) {
                var hasNativeReflectConstruct = clienthintsmetatag_isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = clienthintsmetatag_getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = clienthintsmetatag_getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return clienthintsmetatag_possibleConstructorReturn(this, result);
                };
              }
              function clienthintsmetatag_possibleConstructorReturn(self, call) {
                if (call && (clienthintsmetatag_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                } else if (call !== void 0) {
                  throw new TypeError("Derived constructors may only return object or undefined");
                }
                return clienthintsmetatag_assertThisInitialized(self);
              }
              function clienthintsmetatag_assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self;
              }
              function clienthintsmetatag_isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function clienthintsmetatag_getPrototypeOf(o) {
                clienthintsmetatag_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return clienthintsmetatag_getPrototypeOf(o);
              }
              var clienthintsmetatag_ClientHintsMetaTag = function(_HtmlTag) {
                clienthintsmetatag_inherits(ClientHintsMetaTag, _HtmlTag);
                var _super = clienthintsmetatag_createSuper(ClientHintsMetaTag);
                function ClientHintsMetaTag(options) {
                  clienthintsmetatag_classCallCheck(this, ClientHintsMetaTag);
                  return _super.call(this, "meta", void 0, assign_root_assign_default()({
                    "http-equiv": "Accept-CH",
                    content: "DPR, Viewport-Width, Width"
                  }, options));
                }
                clienthintsmetatag_createClass(ClientHintsMetaTag, [{
                  key: "closeTag",
                  value: function closeTag() {
                    return "";
                  }
                }]);
                return ClientHintsMetaTag;
              }(htmltag);
              ;
              var clienthintsmetatag = clienthintsmetatag_ClientHintsMetaTag;
              function normalizeToArray_toConsumableArray(arr) {
                return normalizeToArray_arrayWithoutHoles(arr) || normalizeToArray_iterableToArray(arr) || normalizeToArray_unsupportedIterableToArray(arr) || normalizeToArray_nonIterableSpread();
              }
              function normalizeToArray_nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              function normalizeToArray_unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return normalizeToArray_arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return normalizeToArray_arrayLikeToArray(o, minLen);
              }
              function normalizeToArray_iterableToArray(iter) {
                if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                  return Array.from(iter);
              }
              function normalizeToArray_arrayWithoutHoles(arr) {
                if (Array.isArray(arr))
                  return normalizeToArray_arrayLikeToArray(arr);
              }
              function normalizeToArray_arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function normalizeToArray(elements) {
                if (isArray_root_isArray_default()(elements)) {
                  return elements;
                } else if (elements.constructor.name === "NodeList") {
                  return normalizeToArray_toConsumableArray(elements);
                } else if (isString_root_isString_default()(elements)) {
                  return Array.prototype.slice.call(document.querySelectorAll(elements), 0);
                } else {
                  return [elements];
                }
              }
              function mountCloudinaryVideoTag(htmlElContainer, clInstance, publicId, options) {
                return new Promise(function(resolve, reject) {
                  htmlElContainer.innerHTML = clInstance.videoTag(publicId, options).toHtml();
                  var cloudinaryVideoElement = htmlElContainer.querySelector(".cld-transparent-video");
                  cloudinaryVideoElement.style.width = "100%";
                  resolve(htmlElContainer);
                });
              }
              var transparentVideo_mountCloudinaryVideoTag = mountCloudinaryVideoTag;
              function addFlagToOptions(options, flag) {
                if (options.transformation) {
                  options.transformation.push({
                    flags: [flag]
                  });
                } else {
                  if (!options.flags) {
                    options.flags = [];
                  }
                  if (typeof options.flags === "string") {
                    options.flags = [options.flags];
                  }
                  options.flags.push(flag);
                }
              }
              var addFlag = addFlagToOptions;
              function enforceOptionsForTransparentVideo(options) {
                options.autoplay = true;
                options.muted = true;
                options.controls = false;
                options.max_timeout_ms = options.max_timeout_ms || DEFAULT_TIMEOUT_MS;
                options["class"] = options["class"] || "";
                options["class"] += " cld-transparent-video";
                options.externalLibraries = options.externalLibraries || {};
                if (!options.externalLibraries.seeThru) {
                  options.externalLibraries.seeThru = DEFAULT_EXTERNAL_LIBRARIES.seeThru;
                }
                addFlag(options, "alpha");
              }
              var transparentVideo_enforceOptionsForTransparentVideo = enforceOptionsForTransparentVideo;
              function loadScript(scriptURL, max_timeout_ms, isAlreadyLoaded) {
                return new Promise(function(resolve, reject) {
                  if (isAlreadyLoaded) {
                    resolve();
                  } else {
                    var scriptTag = document.createElement("script");
                    scriptTag.src = scriptURL;
                    var timerID = setTimeout(function() {
                      reject({
                        status: "error",
                        message: "Timeout loading script ".concat(scriptURL)
                      });
                    }, max_timeout_ms);
                    scriptTag.onerror = function() {
                      clearTimeout(timerID);
                      reject({
                        status: "error",
                        message: "Error loading ".concat(scriptURL)
                      });
                    };
                    scriptTag.onload = function() {
                      clearTimeout(timerID);
                      resolve();
                    };
                    document.head.appendChild(scriptTag);
                  }
                });
              }
              var xhr_loadScript = loadScript;
              function rejectOnTimeout(maxTimeoutMS, reject) {
                return setTimeout(function() {
                  reject({
                    status: "error",
                    message: "Timeout loading Blob URL"
                  });
                }, maxTimeoutMS);
              }
              function getBlobFromURL(urlToLoad, maxTimeoutMS) {
                return new Promise(function(resolve, reject) {
                  var timerID = rejectOnTimeout(maxTimeoutMS, reject);
                  var fetchBlob = typeof fetch !== "undefined" && fetch ? loadUrlUsingFetch : loadUrlUsingXhr;
                  fetchBlob(urlToLoad).then(function(blob) {
                    resolve({
                      status: "success",
                      payload: {
                        blobURL: URL.createObjectURL(blob)
                      }
                    });
                  })["catch"](function() {
                    reject({
                      status: "error",
                      message: "Error loading Blob URL"
                    });
                  })["finally"](function() {
                    clearTimeout(timerID);
                  });
                });
              }
              function loadUrlUsingFetch(urlToLoad) {
                return new Promise(function(resolve, reject) {
                  fetch(urlToLoad).then(function(response) {
                    response.blob().then(function(blob) {
                      resolve(blob);
                    });
                  })["catch"](function() {
                    reject("error");
                  });
                });
              }
              function loadUrlUsingXhr(urlToLoad) {
                return new Promise(function(resolve, reject) {
                  var xhr = new XMLHttpRequest();
                  xhr.responseType = "blob";
                  xhr.onload = function(response) {
                    resolve(xhr.response);
                  };
                  xhr.onerror = function() {
                    reject("error");
                  };
                  xhr.open("GET", urlToLoad, true);
                  xhr.send();
                });
              }
              var xhr_getBlobFromURL = getBlobFromURL;
              function createHiddenVideoTag(videoOptions) {
                var autoplay = videoOptions.autoplay, playsinline = videoOptions.playsinline, loop = videoOptions.loop, muted = videoOptions.muted, poster = videoOptions.poster, blobURL = videoOptions.blobURL, videoURL = videoOptions.videoURL;
                var el = document.createElement("video");
                el.style.visibility = "hidden";
                el.position = "absolute";
                el.x = 0;
                el.y = 0;
                el.src = blobURL;
                el.setAttribute("data-video-url", videoURL);
                autoplay && el.setAttribute("autoplay", autoplay);
                playsinline && el.setAttribute("playsinline", playsinline);
                loop && el.setAttribute("loop", loop);
                muted && el.setAttribute("muted", muted);
                muted && (el.muted = muted);
                poster && el.setAttribute("poster", poster);
                el.onload = function() {
                  URL.revokeObjectURL(blobURL);
                };
                return el;
              }
              var transparentVideo_createHiddenVideoTag = createHiddenVideoTag;
              function instantiateSeeThru(videoElement, max_timeout_ms, customClass, autoPlay) {
                var _window = window, seeThru = _window.seeThru, setTimeout2 = _window.setTimeout, clearTimeout2 = _window.clearTimeout;
                return new Promise(function(resolve, reject) {
                  var timerID = setTimeout2(function() {
                    reject({
                      status: "error",
                      message: "Timeout instantiating seeThru instance"
                    });
                  }, max_timeout_ms);
                  if (seeThru) {
                    var seeThruInstance = seeThru.create(videoElement).ready(function() {
                      clearTimeout2(timerID);
                      var canvasElement = seeThruInstance.getCanvas();
                      canvasElement.style.width = "100%";
                      canvasElement.className += " " + customClass;
                      if (autoPlay) {
                        seeThruInstance.play();
                      }
                      resolve(seeThruInstance);
                    });
                  } else {
                    reject({
                      status: "error",
                      message: "Error instantiating seeThru instance"
                    });
                  }
                });
              }
              var transparentVideo_instantiateSeeThru = instantiateSeeThru;
              function mountSeeThruCanvasTag(htmlElContainer, videoURL, options) {
                var poster = options.poster, autoplay = options.autoplay, playsinline = options.playsinline, loop = options.loop, muted = options.muted;
                videoURL = videoURL + ".mp4";
                return new Promise(function(resolve, reject) {
                  xhr_loadScript(options.externalLibraries.seeThru, options.max_timeout_ms, window.seeThru).then(function() {
                    xhr_getBlobFromURL(videoURL, options.max_timeout_ms).then(function(_ref) {
                      var payload = _ref.payload;
                      var videoElement = transparentVideo_createHiddenVideoTag({
                        blobURL: payload.blobURL,
                        videoURL,
                        // for debugging/testing
                        poster,
                        autoplay,
                        playsinline,
                        loop,
                        muted
                      });
                      htmlElContainer.appendChild(videoElement);
                      transparentVideo_instantiateSeeThru(videoElement, options.max_timeout_ms, options["class"], options.autoplay).then(function() {
                        resolve(htmlElContainer);
                      })["catch"](function(err) {
                        reject(err);
                      });
                    })["catch"](function(_ref2) {
                      var status = _ref2.status, message = _ref2.message;
                      reject({
                        status,
                        message
                      });
                    });
                  })["catch"](function(_ref3) {
                    var status = _ref3.status, message = _ref3.message;
                    reject({
                      status,
                      message
                    });
                  });
                });
              }
              var transparentVideo_mountSeeThruCanvasTag = mountSeeThruCanvasTag;
              function checkSupportForTransparency() {
                return new Promise(function(resolve, reject) {
                  if (isSafari()) {
                    resolve(false);
                  }
                  var video = document.createElement("video");
                  var canPlay = video.canPlayType && video.canPlayType('video/webm; codecs="vp9"');
                  resolve(canPlay === "maybe" || canPlay === "probably");
                });
              }
              var transparentVideo_checkSupportForTransparency = checkSupportForTransparency;
              function cloudinary_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function cloudinary_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function cloudinary_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  cloudinary_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  cloudinary_defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", { writable: false });
                return Constructor;
              }
              var applyBreakpoints, closestAbove, defaultBreakpoints, cloudinary_findContainerWidth, cloudinary_maxWidth, updateDpr;
              defaultBreakpoints = function defaultBreakpoints2(width) {
                var steps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;
                return steps * Math.ceil(width / steps);
              };
              closestAbove = function closestAbove2(list, value) {
                var i;
                i = list.length - 2;
                while (i >= 0 && list[i] >= value) {
                  i--;
                }
                return list[i + 1];
              };
              applyBreakpoints = function applyBreakpoints2(tag, width, steps, options) {
                var ref, ref1, ref2, responsive_use_breakpoints;
                responsive_use_breakpoints = (ref = (ref1 = (ref2 = options["responsive_use_breakpoints"]) != null ? ref2 : options["responsive_use_stoppoints"]) != null ? ref1 : this.config("responsive_use_breakpoints")) != null ? ref : this.config("responsive_use_stoppoints");
                if (!responsive_use_breakpoints || responsive_use_breakpoints === "resize" && !options.resizing) {
                  return width;
                } else {
                  return this.calc_breakpoint(tag, width, steps);
                }
              };
              cloudinary_findContainerWidth = function findContainerWidth(element) {
                var containerWidth, style;
                containerWidth = 0;
                while ((element = element != null ? element.parentNode : void 0) instanceof Element && !containerWidth) {
                  style = window.getComputedStyle(element);
                  if (!/^inline/.test(style.display)) {
                    containerWidth = lodash_width(element);
                  }
                }
                return containerWidth;
              };
              updateDpr = function updateDpr2(dataSrc, roundDpr) {
                return dataSrc.replace(/\bdpr_(1\.0|auto)\b/g, "dpr_" + this.device_pixel_ratio(roundDpr));
              };
              cloudinary_maxWidth = function maxWidth(requiredWidth, tag) {
                var imageWidth;
                imageWidth = lodash_getData(tag, "width") || 0;
                if (requiredWidth > imageWidth) {
                  imageWidth = requiredWidth;
                  lodash_setData(tag, "width", requiredWidth);
                }
                return imageWidth;
              };
              var cloudinary_Cloudinary = function() {
                function Cloudinary2(options) {
                  cloudinary_classCallCheck(this, Cloudinary2);
                  var configuration;
                  this.devicePixelRatioCache = {};
                  this.responsiveConfig = {};
                  this.responsiveResizeInitialized = false;
                  configuration = new src_configuration(options);
                  this.config = function(newConfig, newValue) {
                    return configuration.config(newConfig, newValue);
                  };
                  this.fromDocument = function() {
                    configuration.fromDocument();
                    return this;
                  };
                  this.fromEnvironment = function() {
                    configuration.fromEnvironment();
                    return this;
                  };
                  this.init = function() {
                    configuration.init();
                    return this;
                  };
                }
                cloudinary_createClass(Cloudinary2, [{
                  key: "url",
                  value: (
                    /**
                     * Generates a URL for any asset in your Media library.
                     * @function Cloudinary#url
                     * @param {string} publicId - The public ID of the media asset.
                     * @param {Object} [options] - The {@link Transformation} parameters to include in the URL.
                     * @param {type} [options.type='upload'] - The asset's storage type.
                     *  For details on all fetch types, see
                     * <a href="https://cloudinary.com/documentation/image_transformations#fetching_images_from_remote_locations"
                     *  target="_blank">Fetch types</a>.
                     * @param {resourceType} [options.resource_type='image'] - The type of asset. Possible values:<br/>
                     *  - `image`<br/>
                     *  - `video`<br/>
                     *  - `raw`
                     * @return {string} The media asset URL.
                     * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                     *  Available image transformations</a>
                     * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                     *  Available video transformations</a>
                     */
                    function url(publicId) {
                      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                      return url_url(publicId, options, this.config());
                    }
                  )
                  /**
                   * Generates a video asset URL.
                   * @function Cloudinary#video_url
                   * @param {string} publicId - The public ID of the video.
                   * @param {Object} [options] - The {@link Transformation} parameters to include in the URL.
                   * @param {type} [options.type='upload'] - The asset's storage type.
                   *  For details on all fetch types, see
                   *  <a href="https://cloudinary.com/documentation/image_transformations#fetching_images_from_remote_locations"
                   *  target="_blank">Fetch types</a>.
                   * @return {string} The video URL.
                   * @see <a href="https://cloudinary.com/documentation/video_transformation_reference"
                   *  target="_blank">Available video transformations</a>
                   */
                }, {
                  key: "video_url",
                  value: function video_url(publicId, options) {
                    options = assign_root_assign_default()({
                      resource_type: "video"
                    }, options);
                    return this.url(publicId, options);
                  }
                  /**
                   * Generates a URL for an image intended to be used as a thumbnail for the specified video.
                   *  Identical to {@link Cloudinary#url|url}, except that the `resource_type` is `video`
                   *  and the default `format` is `jpg`.
                   * @function Cloudinary#video_thumbnail_url
                   * @param {string} publicId -  The unique identifier of the video from which you want to generate a thumbnail image.
                   * @param {Object} [options] - The image {@link Transformation} parameters to apply to the thumbnail.
                   * In addition to standard image transformations, you can also use the `start_offset` transformation parameter
                   * to instruct Cloudinary to generate the thumbnail from a frame other than the middle frame of the video.
                   * For details, see
                   * <a href="https://cloudinary.com/documentation/video_manipulation_and_delivery#generating_video_thumbnails"
                   * target="_blank">Generating video thumbnails</a> in the Cloudinary documentation.
                   * @param {type} [options.type='upload'] - The asset's storage type.
                   * @return {string} The URL of the video thumbnail image.
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   */
                }, {
                  key: "video_thumbnail_url",
                  value: function video_thumbnail_url(publicId, options) {
                    options = assign_root_assign_default()({}, DEFAULT_POSTER_OPTIONS, options);
                    return this.url(publicId, options);
                  }
                  /**
                   * Generates a string representation of the specified transformation options.
                   * @function Cloudinary#transformation_string
                   * @param {Object} options - The {@link Transformation} options.
                   * @returns {string} The transformation string.
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                   *  Available video transformations</a>
                   */
                }, {
                  key: "transformation_string",
                  value: function transformation_string(options) {
                    return new src_transformation(options).serialize();
                  }
                  /**
                   * Generates an image tag.
                   * @function Cloudinary#image
                   * @param {string} publicId - The public ID of the image.
                   * @param {Object} options - The {@link Transformation} parameters, {@link Configuration} parameters,
                   *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                   * @return {HTMLImageElement} An image tag DOM element.
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                   *  target="_blank">Available configuration options</a>
                   */
                }, {
                  key: "image",
                  value: function image(publicId) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                    var client_hints, img, ref;
                    img = this.imageTag(publicId, options);
                    client_hints = (ref = options.client_hints != null ? options.client_hints : this.config("client_hints")) != null ? ref : false;
                    if (options.src == null && !client_hints) {
                      img.setAttr("src", "");
                    }
                    img = img.toDOM();
                    if (!client_hints) {
                      lodash_setData(img, "src-cache", this.url(publicId, options));
                      this.cloudinary_update(img, options);
                    }
                    return img;
                  }
                  /**
                   * Creates a new ImageTag instance using the configuration defined for this `cloudinary` instance.
                   * @function Cloudinary#imageTag
                   * @param {string} publicId - The public ID of the image.
                   * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                   *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                   * @return {ImageTag} An ImageTag instance that is attached (chained) to this Cloudinary instance.
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                   *  target="_blank">Available configuration options</a>
                   */
                }, {
                  key: "imageTag",
                  value: function imageTag(publicId, options) {
                    var tag;
                    tag = new imagetag(publicId, this.config());
                    tag.transformation().fromOptions(options);
                    return tag;
                  }
                  /**
                   * Creates a new PictureTag instance, configured using this `cloudinary` instance.
                   * @function Cloudinary#PictureTag
                   * @param {string} publicId - the public ID of the resource
                   * @param {Object} options - additional options to pass to the new ImageTag instance
                   * @param {Array<Object>} sources - the sources definitions
                   * @return {PictureTag} A PictureTag that is attached (chained) to this Cloudinary instance
                   */
                }, {
                  key: "pictureTag",
                  value: function pictureTag(publicId, options, sources) {
                    var tag;
                    tag = new picturetag(publicId, this.config(), sources);
                    tag.transformation().fromOptions(options);
                    return tag;
                  }
                  /**
                   * Creates a new SourceTag instance, configured using this `cloudinary` instance.
                   * @function Cloudinary#SourceTag
                   * @param {string} publicId - the public ID of the resource.
                   * @param {Object} options - additional options to pass to the new instance.
                   * @return {SourceTag} A SourceTag that is attached (chained) to this Cloudinary instance
                   */
                }, {
                  key: "sourceTag",
                  value: function sourceTag(publicId, options) {
                    var tag;
                    tag = new sourcetag(publicId, this.config());
                    tag.transformation().fromOptions(options);
                    return tag;
                  }
                  /**
                   * Generates a video thumbnail URL from the specified remote video and includes it in an image tag.
                   * @function Cloudinary#video_thumbnail
                   * @param {string} publicId - The unique identifier of the video from the relevant video site.
                   *  Additionally, either append the image extension type to the identifier value or set
                   *  the image delivery format in the 'options' parameter using the 'format' transformation option.
                   *  For example, a YouTube video might have the identifier: 'o-urnlaJpOA.jpg'.
                   * @param {Object} [options] - The {@link Transformation} parameters to apply.
                   * @return {HTMLImageElement} An HTML image tag element
                   * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                   *  Available video transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                   *  target="_blank">Available configuration options</a>
                   */
                }, {
                  key: "video_thumbnail",
                  value: function video_thumbnail(publicId, options) {
                    return this.image(publicId, merge_root_merge_default()({}, DEFAULT_POSTER_OPTIONS, options));
                  }
                  /**
                   * Fetches a facebook profile image and delivers it in an image tag element.
                   * @function Cloudinary#facebook_profile_image
                   * @param {string} publicId - The Facebook numeric ID. Additionally, either append the image extension type
                   *  to the ID or set the image delivery format in the 'options' parameter using the 'format' transformation option.
                   * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                   *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                   * @return {HTMLImageElement} An image tag element.
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                   *  target="_blank">Available configuration options</a>
                   */
                }, {
                  key: "facebook_profile_image",
                  value: function facebook_profile_image(publicId, options) {
                    return this.image(publicId, assign_root_assign_default()({
                      type: "facebook"
                    }, options));
                  }
                  /**
                   * Fetches a Twitter profile image by ID and delivers it in an image tag element.
                   * @function Cloudinary#twitter_profile_image
                   * @param {string} publicId - The Twitter numeric ID. Additionally, either append the image extension type
                   *  to the ID or set the image delivery format in the 'options' parameter using the 'format' transformation option.
                   * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                   *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                   * @return {HTMLImageElement} An image tag element.
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                   *  target="_blank">Available configuration options</a>
                   */
                }, {
                  key: "twitter_profile_image",
                  value: function twitter_profile_image(publicId, options) {
                    return this.image(publicId, assign_root_assign_default()({
                      type: "twitter"
                    }, options));
                  }
                  /**
                   * Fetches a Twitter profile image by name and delivers it in an image tag element.
                   * @function Cloudinary#twitter_name_profile_image
                   * @param {string} publicId - The Twitter screen name. Additionally, either append the image extension type
                   *  to the screen name or set the image delivery format in the 'options' parameter using the 'format' transformation option.
                   * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                   *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                   * @return {HTMLImageElement} An image tag element.
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                   *  target="_blank">Available configuration options</a>
                   */
                }, {
                  key: "twitter_name_profile_image",
                  value: function twitter_name_profile_image(publicId, options) {
                    return this.image(publicId, assign_root_assign_default()({
                      type: "twitter_name"
                    }, options));
                  }
                  /**
                   * Fetches a Gravatar profile image and delivers it in an image tag element.
                   * @function Cloudinary#gravatar_image
                   * @param {string} publicId - The calculated hash for the Gravatar email address.
                   *  Additionally, either append the image extension type to the screen name or set the image delivery format
                   *  in the 'options' parameter using the 'format' transformation option.
                   * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                   *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                   * @return {HTMLImageElement} An image tag element.
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                   *  target="_blank">Available configuration options</a>
                   */
                }, {
                  key: "gravatar_image",
                  value: function gravatar_image(publicId, options) {
                    return this.image(publicId, assign_root_assign_default()({
                      type: "gravatar"
                    }, options));
                  }
                  /**
                   * Fetches an image from a remote URL and delivers it in an image tag element.
                   * @function Cloudinary#fetch_image
                   * @param {string} publicId - The full URL of the image to fetch, including the extension.
                   * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                   *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                   * @return {HTMLImageElement} An image tag element.
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                   *  target="_blank">Available configuration options</a>
                   */
                }, {
                  key: "fetch_image",
                  value: function fetch_image(publicId, options) {
                    return this.image(publicId, assign_root_assign_default()({
                      type: "fetch"
                    }, options));
                  }
                  /**
                   * Generates a video tag.
                   * @function Cloudinary#video
                   * @param {string} publicId - The public ID of the video.
                   * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                   *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                   * @return {HTMLVideoElement} A video tag DOM element.
                   * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                   *  Available video transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                   *  target="_blank">Available configuration options</a>
                   */
                }, {
                  key: "video",
                  value: function video(publicId) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                    return this.videoTag(publicId, options).toHtml();
                  }
                  /**
                   * Creates a new VideoTag instance using the configuration defined for this `cloudinary` instance.
                   * @function Cloudinary#videoTag
                   * @param {string} publicId - The public ID of the video.
                   * @param {Object} options - The {@link Transformation} parameters, {@link Configuration} parameters,
                   *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                   * @return {VideoTag} A VideoTag that is attached (chained) to this `cloudinary` instance.
                   * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                   *  Available video transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                   *  target="_blank">Available configuration options</a>
                   */
                }, {
                  key: "videoTag",
                  value: function videoTag(publicId, options) {
                    options = defaults({}, options, this.config());
                    return new videotag(publicId, options);
                  }
                  /**
                   * Generates a sprite PNG image that contains all images with the specified tag and the corresponding css file.
                   * @function Cloudinary#sprite_css
                   * @param {string} publicId - The tag on which to base the sprite image.
                   * @param {Object} [options] - The {@link Transformation} parameters to include in the URL.
                   * @return {string} The URL of the generated CSS file. The sprite image has the same URL, but with a PNG extension.
                   * @see <a href="https://cloudinary.com/documentation/sprite_generation" target="_blank">
                   *  Sprite generation</a>
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   */
                }, {
                  key: "sprite_css",
                  value: function sprite_css(publicId, options) {
                    options = assign_root_assign_default()({
                      type: "sprite"
                    }, options);
                    if (!publicId.match(/.css$/)) {
                      options.format = "css";
                    }
                    return this.url(publicId, options);
                  }
                  /**
                   * Initializes responsive image behavior for all image tags with the 'cld-responsive'
                   *  (or other defined {@link Cloudinary#responsive|responsive} class).<br/>
                   *  This method should be invoked after the page has loaded.<br/>
                   *  <b>Note</b>: Calls {@link Cloudinary#cloudinary_update|cloudinary_update} to modify image tags.
                   * @function Cloudinary#responsive
                   * @param {Object} options
                   * @param {String} [options.responsive_class='cld-responsive'] - An alternative class
                   *  to locate the relevant &lt;img&gt; tags.
                   * @param {number} [options.responsive_debounce=100] - The debounce interval in milliseconds.
                   * @param {boolean} [bootstrap=true] If true, processes the &lt;img&gt; tags by calling
                   *  {@link Cloudinary#cloudinary_update|cloudinary_update}. When false, the tags are processed
                   *  only after a resize event.
                   * @see {@link Cloudinary#cloudinary_update|cloudinary_update} for additional configuration parameters
                   * @see <a href="https://cloudinary.com/documentation/responsive_images#automating_responsive_images_with_javascript"
                   *  target="_blank">Automating responsive images with JavaScript</a>
                   * @return {function} that when called, removes the resize EventListener added by this function
                   */
                }, {
                  key: "responsive",
                  value: function responsive(options) {
                    var _this = this;
                    var bootstrap = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
                    var ref, ref1, ref2, responsiveClass, responsiveResize, timeout;
                    this.responsiveConfig = merge_root_merge_default()(this.responsiveConfig || {}, options);
                    responsiveClass = (ref = this.responsiveConfig.responsive_class) != null ? ref : this.config("responsive_class");
                    if (bootstrap) {
                      this.cloudinary_update("img.".concat(responsiveClass, ", img.cld-hidpi"), this.responsiveConfig);
                    }
                    responsiveResize = (ref1 = (ref2 = this.responsiveConfig.responsive_resize) != null ? ref2 : this.config("responsive_resize")) != null ? ref1 : true;
                    if (responsiveResize && !this.responsiveResizeInitialized) {
                      this.responsiveConfig.resizing = this.responsiveResizeInitialized = true;
                      timeout = null;
                      var makeResponsive = function makeResponsive2() {
                        var debounce, ref3, ref4, reset, run, wait, waitFunc;
                        debounce = (ref3 = (ref4 = _this.responsiveConfig.responsive_debounce) != null ? ref4 : _this.config("responsive_debounce")) != null ? ref3 : 100;
                        reset = function reset2() {
                          if (timeout) {
                            clearTimeout(timeout);
                            timeout = null;
                          }
                        };
                        run = function run2() {
                          return _this.cloudinary_update("img.".concat(responsiveClass), _this.responsiveConfig);
                        };
                        waitFunc = function waitFunc2() {
                          reset();
                          return run();
                        };
                        wait = function wait2() {
                          reset();
                          timeout = setTimeout(waitFunc, debounce);
                        };
                        if (debounce) {
                          return wait();
                        } else {
                          return run();
                        }
                      };
                      window.addEventListener("resize", makeResponsive);
                      return function() {
                        return window.removeEventListener("resize", makeResponsive);
                      };
                    }
                  }
                  /**
                   * @function Cloudinary#calc_breakpoint
                   * @private
                   * @ignore
                   */
                }, {
                  key: "calc_breakpoint",
                  value: function calc_breakpoint(element, width, steps) {
                    var breakpoints = lodash_getData(element, "breakpoints") || lodash_getData(element, "stoppoints") || this.config("breakpoints") || this.config("stoppoints") || defaultBreakpoints;
                    if (isFunction_root_isFunction_default()(breakpoints)) {
                      return breakpoints(width, steps);
                    } else {
                      if (isString_root_isString_default()(breakpoints)) {
                        breakpoints = breakpoints.split(",").map(function(point) {
                          return parseInt(point);
                        }).sort(function(a, b) {
                          return a - b;
                        });
                      }
                      return closestAbove(breakpoints, width);
                    }
                  }
                  /**
                   * @function Cloudinary#calc_stoppoint
                   * @deprecated Use {@link calc_breakpoint} instead.
                   * @private
                   * @ignore
                   */
                }, {
                  key: "calc_stoppoint",
                  value: function calc_stoppoint(element, width, steps) {
                    return this.calc_breakpoint(element, width, steps);
                  }
                  /**
                   * @function Cloudinary#device_pixel_ratio
                   * @private
                   */
                }, {
                  key: "device_pixel_ratio",
                  value: function device_pixel_ratio(roundDpr) {
                    roundDpr = roundDpr == null ? true : roundDpr;
                    var dpr = (typeof window !== "undefined" && window !== null ? window.devicePixelRatio : void 0) || 1;
                    if (roundDpr) {
                      dpr = Math.ceil(dpr);
                    }
                    if (dpr <= 0 || dpr === 0 / 0) {
                      dpr = 1;
                    }
                    var dprString = dpr.toString();
                    if (dprString.match(/^\d+$/)) {
                      dprString += ".0";
                    }
                    return dprString;
                  }
                  /**
                  * Applies responsiveness to all <code>&lt;img&gt;</code> tags under each relevant node
                  *  (regardless of whether the tag contains the {@link Cloudinary#responsive|responsive} class).
                  * @param {Element[]} nodes The parent nodes where you want to search for &lt;img&gt; tags.
                  * @param {Object} [options] The {@link Cloudinary#cloudinary_update|cloudinary_update} options to apply.
                  * @see <a href="https://cloudinary.com/documentation/image_transformation_reference"
                  *  target="_blank">Available image transformations</a>
                  * @function Cloudinary#processImageTags
                  */
                }, {
                  key: "processImageTags",
                  value: function processImageTags(nodes, options) {
                    if (isEmpty2(nodes)) {
                      return this;
                    }
                    options = defaults({}, options || {}, this.config());
                    var images = nodes.filter(function(node) {
                      return /^img$/i.test(node.tagName);
                    }).map(function(node) {
                      var imgOptions = assign_root_assign_default()({
                        width: node.getAttribute("width"),
                        height: node.getAttribute("height"),
                        src: node.getAttribute("src")
                      }, options);
                      var publicId = imgOptions["source"] || imgOptions["src"];
                      delete imgOptions["source"];
                      delete imgOptions["src"];
                      var attr = new src_transformation(imgOptions).toHtmlAttributes();
                      lodash_setData(node, "src-cache", url_url(publicId, imgOptions));
                      node.setAttribute("width", attr.width);
                      node.setAttribute("height", attr.height);
                      return node;
                    });
                    this.cloudinary_update(images, options);
                    return this;
                  }
                  /**
                  * Updates the dpr (for `dpr_auto`) and responsive (for `w_auto`) fields according to
                  *  the current container size and the device pixel ratio.<br/>
                  *  <b>Note</b>:`w_auto` is updated only for images marked with the `cld-responsive`
                  *  (or other defined {@link Cloudinary#responsive|responsive}) class.
                  * @function Cloudinary#cloudinary_update
                  * @param {(Array|string|NodeList)} elements - The HTML image elements to modify.
                  * @param {Object} options
                  * @param {boolean|string} [options.responsive_use_breakpoints=true]
                  * Possible values:<br/>
                  *  - `true`: Always use breakpoints for width.<br/>
                  *  - `resize`: Use exact width on first render and breakpoints on resize.<br/>
                  *  - `false`: Always use exact width.
                  * @param {boolean} [options.responsive] - If `true`, enable responsive on all specified elements.
                  *  Alternatively, you can define specific HTML elements to modify by adding the `cld-responsive`
                  *  (or other custom-defined {@link Cloudinary#responsive|responsive_class}) class to those elements.
                  * @param {boolean} [options.responsive_preserve_height] - If `true`, original css height is preserved.
                  *  Should be used only if the transformation supports different aspect ratios.
                  */
                }, {
                  key: "cloudinary_update",
                  value: function cloudinary_update(elements, options) {
                    var _this2 = this;
                    var containerWidth, dataSrc, match, ref4, requiredWidth;
                    if (elements === null) {
                      return this;
                    }
                    if (options == null) {
                      options = {};
                    }
                    var responsive = options.responsive != null ? options.responsive : this.config("responsive");
                    elements = normalizeToArray(elements);
                    var responsiveClass;
                    if (this.responsiveConfig && this.responsiveConfig.responsive_class != null) {
                      responsiveClass = this.responsiveConfig.responsive_class;
                    } else if (options.responsive_class != null) {
                      responsiveClass = options.responsive_class;
                    } else {
                      responsiveClass = this.config("responsive_class");
                    }
                    var roundDpr = options.round_dpr != null ? options.round_dpr : this.config("round_dpr");
                    elements.forEach(function(tag) {
                      if (/img/i.test(tag.tagName)) {
                        var setUrl = true;
                        if (responsive) {
                          lodash_addClass(tag, responsiveClass);
                        }
                        dataSrc = lodash_getData(tag, "src-cache") || lodash_getData(tag, "src");
                        if (!isEmpty2(dataSrc)) {
                          dataSrc = updateDpr.call(_this2, dataSrc, roundDpr);
                          if (htmltag.isResponsive(tag, responsiveClass)) {
                            containerWidth = cloudinary_findContainerWidth(tag);
                            if (containerWidth !== 0) {
                              if (/w_auto:breakpoints/.test(dataSrc)) {
                                requiredWidth = cloudinary_maxWidth(containerWidth, tag);
                                if (requiredWidth) {
                                  dataSrc = dataSrc.replace(/w_auto:breakpoints([_0-9]*)(:[0-9]+)?/, "w_auto:breakpoints$1:".concat(requiredWidth));
                                } else {
                                  setUrl = false;
                                }
                              } else {
                                match = /w_auto(:(\d+))?/.exec(dataSrc);
                                if (match) {
                                  requiredWidth = applyBreakpoints.call(_this2, tag, containerWidth, match[2], options);
                                  requiredWidth = cloudinary_maxWidth(requiredWidth, tag);
                                  if (requiredWidth) {
                                    dataSrc = dataSrc.replace(/w_auto[^,\/]*/g, "w_".concat(requiredWidth));
                                  } else {
                                    setUrl = false;
                                  }
                                }
                              }
                              lodash_removeAttribute(tag, "width");
                              if (!options.responsive_preserve_height) {
                                lodash_removeAttribute(tag, "height");
                              }
                            } else {
                              setUrl = false;
                            }
                          }
                          var isLazyLoading = options.loading === "lazy" && !_this2.isNativeLazyLoadSupported() && _this2.isLazyLoadSupported() && !elements[0].getAttribute("src");
                          if (setUrl || isLazyLoading) {
                            _this2.setAttributeIfExists(elements[0], "width", "data-width");
                          }
                          if (setUrl && !isLazyLoading) {
                            lodash_setAttribute(tag, "src", dataSrc);
                          }
                        }
                      }
                    });
                    return this;
                  }
                  /**
                   * Sets element[toAttribute] = element[fromAttribute] if element[fromAttribute] is set
                   * @param element
                   * @param toAttribute
                   * @param fromAttribute
                   */
                }, {
                  key: "setAttributeIfExists",
                  value: function setAttributeIfExists(element, toAttribute, fromAttribute) {
                    var attributeValue = element.getAttribute(fromAttribute);
                    if (attributeValue != null) {
                      lodash_setAttribute(element, toAttribute, attributeValue);
                    }
                  }
                  /**
                   * Returns true if Intersection Observer API is supported
                   * @returns {boolean}
                   */
                }, {
                  key: "isLazyLoadSupported",
                  value: function isLazyLoadSupported() {
                    return window && "IntersectionObserver" in window;
                  }
                  /**
                   * Returns true if using Chrome
                   * @returns {boolean}
                   */
                }, {
                  key: "isNativeLazyLoadSupported",
                  value: function isNativeLazyLoadSupported2() {
                    return "loading" in HTMLImageElement.prototype;
                  }
                  /**
                   * Returns a {@link Transformation} object, initialized with the specified options, for chaining purposes.
                   * @function Cloudinary#transformation
                   * @param {Object} options The {@link Transformation} options to apply.
                   * @return {Transformation}
                   * @see Transformation
                   * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                   *  Available image transformations</a>
                   * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                   *  Available video transformations</a>
                   */
                }, {
                  key: "transformation",
                  value: function transformation(options) {
                    return src_transformation["new"](this.config()).fromOptions(options).setParent(this);
                  }
                  /**
                   * @description This function will append a TransparentVideo element to the htmlElContainer passed to it.
                   *              TransparentVideo can either be an HTML Video tag, or an HTML Canvas Tag.
                   * @param {HTMLElement} htmlElContainer
                   * @param {string} publicId
                   * @param {object} options The {@link TransparentVideoOptions} options to apply - Extends TransformationOptions
                   *                 options.playsinline    - HTML Video Tag's native playsinline - passed to video element.
                   *                 options.poster         - HTML Video Tag's native poster - passed to video element.
                   *                 options.loop           - HTML Video Tag's native loop - passed to video element.
                   *                 options?.externalLibraries = { [key: string]: string} - map of external libraries to be loaded
                   * @return {Promise<HTMLElement | {status:string, message:string}>}
                   */
                }, {
                  key: "injectTransparentVideoElement",
                  value: function injectTransparentVideoElement(htmlElContainer, publicId) {
                    var _this3 = this;
                    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                    return new Promise(function(resolve, reject) {
                      if (!htmlElContainer) {
                        reject({
                          status: "error",
                          message: "Expecting htmlElContainer to be HTMLElement"
                        });
                      }
                      transparentVideo_enforceOptionsForTransparentVideo(options);
                      var videoURL = _this3.video_url(publicId, options);
                      transparentVideo_checkSupportForTransparency().then(function(isNativelyTransparent) {
                        var mountPromise;
                        if (isNativelyTransparent) {
                          mountPromise = transparentVideo_mountCloudinaryVideoTag(htmlElContainer, _this3, publicId, options);
                          resolve(htmlElContainer);
                        } else {
                          mountPromise = transparentVideo_mountSeeThruCanvasTag(htmlElContainer, videoURL, options);
                        }
                        mountPromise.then(function() {
                          resolve(htmlElContainer);
                        })["catch"](function(_ref) {
                          var status = _ref.status, message = _ref.message;
                          reject({
                            status,
                            message
                          });
                        });
                      })["catch"](function(_ref2) {
                        var status = _ref2.status, message = _ref2.message;
                        reject({
                          status,
                          message
                        });
                      });
                    });
                  }
                }], [{
                  key: "new",
                  value: function _new(options) {
                    return new this(options);
                  }
                }]);
                return Cloudinary2;
              }();
              assign_root_assign_default()(cloudinary_Cloudinary, constants_namespaceObject);
              var cloudinary = cloudinary_Cloudinary;
              var cloudinary_core = __webpack_exports__["default"] = {
                ClientHintsMetaTag: clienthintsmetatag,
                Cloudinary: cloudinary,
                Condition: condition,
                Configuration: src_configuration,
                crc32: src_crc32,
                Expression: expression,
                FetchLayer: fetchlayer,
                HtmlTag: htmltag,
                ImageTag: imagetag,
                Layer: layer_layer,
                PictureTag: picturetag,
                SubtitlesLayer: subtitleslayer,
                TextLayer: textlayer,
                Transformation: src_transformation,
                utf8_encode: src_utf8_encode,
                Util: lodash_namespaceObject,
                VideoTag: videotag
              };
            }
          ),
          /***/
          "lodash/assign": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_assign__;
            }
          ),
          /***/
          "lodash/cloneDeep": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_cloneDeep__;
            }
          ),
          /***/
          "lodash/compact": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_compact__;
            }
          ),
          /***/
          "lodash/difference": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_difference__;
            }
          ),
          /***/
          "lodash/functions": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_functions__;
            }
          ),
          /***/
          "lodash/identity": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_identity__;
            }
          ),
          /***/
          "lodash/includes": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_includes__;
            }
          ),
          /***/
          "lodash/isArray": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_isArray__;
            }
          ),
          /***/
          "lodash/isElement": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_isElement__;
            }
          ),
          /***/
          "lodash/isFunction": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_isFunction__;
            }
          ),
          /***/
          "lodash/isPlainObject": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_isPlainObject__;
            }
          ),
          /***/
          "lodash/isString": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_isString__;
            }
          ),
          /***/
          "lodash/merge": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_merge__;
            }
          ),
          /***/
          "lodash/trim": (
            /***/
            function(module2, exports2) {
              module2.exports = __WEBPACK_EXTERNAL_MODULE_lodash_trim__;
            }
          )
          /******/
        })
      );
    });
  }
});

// node_modules/cloudinary-react/dist/cloudinary-react.esm.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_cloudinary_core = __toESM(require_cloudinary_core());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$2 = ["public_id"];
var _excluded2 = ["publicId"];
var _excluded3 = ["children"];
var _excluded4 = ["children", "accessibility", "placeholder"];
var camelCase$1 = import_cloudinary_core.Util.camelCase;
var withCamelCaseKeys = import_cloudinary_core.Util.withCamelCaseKeys;
var isEmpty = import_cloudinary_core.Util.isEmpty;
var CLOUDINARY_REACT_PROPS = ["accessibility", "breakpoints", "dataSrc", "placeholder", "publicId", "signature", "authToken"];
var VIDEO_MIME_TYPES = {
  flv: "x-flv",
  "3gp": "3gpp",
  mov: "quicktime",
  mpg: "mpeg",
  avi: "x-msvideo",
  wmv: "x-ms-wmv",
  ogv: "ogg"
};
var AUDIO_MIME_TYPES = {
  m4a: "mp4",
  wav: "vnd.wav",
  m3u: "x-mpegurl",
  mp3: "mpeg",
  ogv: "ogg",
  aif: "x-aiff",
  aifc: "x-aiff",
  aiff: "x-aiff"
};
var CLOUDINARY_PROPS = [].concat(import_cloudinary_core.Transformation.PARAM_NAMES, CLOUDINARY_REACT_PROPS).map(import_cloudinary_core.Util.camelCase).reduce(function(accumulator, cloudinaryPropName) {
  accumulator[cloudinaryPropName] = true;
  return accumulator;
}, {});
var nonEmpty = function nonEmpty2(obj) {
  return Object.entries(obj).reduce(function(a, _ref) {
    var _extends2;
    var k = _ref[0], v = _ref[1];
    return v == null ? a : _extends({}, a, (_extends2 = {}, _extends2[k] = v, _extends2));
  }, {});
};
var getConfiguredCloudinary = function getConfiguredCloudinary2(extendedProps) {
  var _nonEmpty = nonEmpty(extendedProps), ops = _objectWithoutPropertiesLoose(_nonEmpty, _excluded$2);
  var options = import_cloudinary_core.Util.withSnakeCaseKeys(ops);
  return import_cloudinary_core.Cloudinary["new"](options);
};
var getTag = function getTag2(props, tagType) {
  var publicId = props.publicId, ops = _objectWithoutPropertiesLoose(props, _excluded2);
  var cld = getConfiguredCloudinary(ops);
  return cld[tagType + "Tag"](publicId, import_cloudinary_core.Util.withSnakeCaseKeys(ops));
};
var getImageTag = function getImageTag2(props) {
  return getTag(props, "image");
};
var makeElementResponsive = function makeElementResponsive2(img, options) {
  var snakeCaseOptions = import_cloudinary_core.Util.withSnakeCaseKeys(options);
  var cld = getConfiguredCloudinary(snakeCaseOptions);
  cld.cloudinary_update(img, snakeCaseOptions);
  return cld.responsive(snakeCaseOptions, false);
};
var extractCloudinaryProps = function extractCloudinaryProps2(_ref2) {
  var children = _ref2.children, props = _objectWithoutPropertiesLoose(_ref2, _excluded3);
  var result = {
    children,
    cloudinaryProps: {},
    nonCloudinaryProps: {},
    cloudinaryReactProps: {}
  };
  Object.keys(props).forEach(function(key) {
    var camelKey = import_cloudinary_core.Util.camelCase(key);
    var value = props[key];
    if (CLOUDINARY_PROPS[camelKey]) {
      if (props[key] !== void 0 && props[key] !== null) {
        result.cloudinaryProps[camelKey] = value;
      }
    } else if (camelKey === "includeOwnBody") {
      result.cloudinaryReactProps[camelKey] = value;
    } else {
      result.nonCloudinaryProps[key] = value;
    }
  });
  return result;
};
var isCloudinaryComponent = function isCloudinaryComponent2(component, displayName) {
  return !!(import_react.default.isValidElement(component) && component.type && component.type.displayName === displayName);
};
var normalizeOptions = function normalizeOptions2() {
  return [].slice.call(arguments).reduce(function(left, right) {
    Object.keys(right || {}).forEach(function(key) {
      var value = right[key];
      if (value !== null && value !== void 0) {
        left[key] = value;
      }
    });
    return left;
  }, {});
};
var getChildPlaceholder = function getChildPlaceholder2(children) {
  var result = null;
  if (children) {
    result = import_react.default.Children.toArray(children).find(function(child) {
      return isCloudinaryComponent(child, "CloudinaryPlaceholder");
    });
  }
  return result;
};
var getChildTransformations = function getChildTransformations2(children) {
  var result = children ? import_react.default.Children.toArray(children).filter(function(child) {
    return isCloudinaryComponent(child, "CloudinaryTransformation");
  }).map(function(child) {
    var options = normalizeOptions(child.props, child.context);
    var childOptions = getChildTransformations2(child.props.children);
    if (childOptions) {
      options.transformation = childOptions;
    }
    return options;
  }) : [];
  return result.length ? result : null;
};
var only = function only2(source, keys) {
  if (keys === void 0) {
    keys = [];
  }
  if (!source) {
    return source;
  }
  return keys.reduce(function(tr, key) {
    if (key in source) {
      tr[key] = source[key];
    }
    return tr;
  }, {});
};
var typesFrom = function typesFrom2(configParams) {
  configParams = configParams || [];
  var types = {};
  for (var i = 0; i < configParams.length; i++) {
    var key = configParams[i];
    types[camelCase$1(key)] = import_prop_types.default.any;
  }
  return types;
};
var getTransformation = function getTransformation2(extendedProps) {
  var children = extendedProps.children, accessibility = extendedProps.accessibility, placeholder = extendedProps.placeholder, rest = _objectWithoutPropertiesLoose(extendedProps, _excluded4);
  var ownTransformation = only(withCamelCaseKeys(rest), import_cloudinary_core.Transformation.methods) || {};
  var childrenOptions = getChildTransformations(children);
  if (!isEmpty(childrenOptions)) {
    ownTransformation.transformation = childrenOptions;
  }
  var advancedTransformations = {
    accessibility,
    placeholder
  };
  Object.keys(advancedTransformations).filter(function(k) {
    return advancedTransformations[k];
  }).forEach(function(k) {
    ownTransformation[k] = advancedTransformations[k];
  });
  return ownTransformation;
};
var CloudinaryContextType = (0, import_react.createContext)();
var camelCase = import_cloudinary_core.Util.camelCase;
var CloudinaryComponent = function(_PureComponent) {
  _inheritsLoose(CloudinaryComponent2, _PureComponent);
  function CloudinaryComponent2(_props, _context) {
    var _this;
    _this = _PureComponent.call(this, _props, _context) || this;
    _this.getContext = function() {
      return _this.context || {};
    };
    _this.onIntersect = function() {
      _this.setState({
        isInView: true
      });
    };
    _this.getExtendedProps = function(props, context) {
      if (props === void 0) {
        props = _this.props;
      }
      if (context === void 0) {
        context = _this.getContext();
      }
      return normalizeOptions(context, props);
    };
    _this.attachRef = function(element) {
      var innerRef = _this.props.innerRef;
      _this.element.current = element;
      if (innerRef) {
        if (innerRef instanceof Function) {
          innerRef(element);
        } else {
          innerRef.current = element;
        }
      }
    };
    _this.element = (0, import_react.createRef)();
    return _this;
  }
  var _proto = CloudinaryComponent2.prototype;
  _proto.render = function render() {
    return null;
  };
  return CloudinaryComponent2;
}(import_react.PureComponent);
CloudinaryComponent.defaultProps = {
  innerRef: null,
  publicId: null
};
CloudinaryComponent.propTypes = _extends({}, typesFrom(import_cloudinary_core.Transformation.PARAM_NAMES.map(camelCase)), {
  innerRef: import_prop_types.default.any,
  publicId: import_prop_types.default.string
});
CloudinaryComponent.contextType = CloudinaryContextType;
var CloudinaryContext = function(_CloudinaryComponent) {
  _inheritsLoose(CloudinaryContext2, _CloudinaryComponent);
  function CloudinaryContext2() {
    return _CloudinaryComponent.apply(this, arguments) || this;
  }
  var _proto = CloudinaryContext2.prototype;
  _proto.render = function render() {
    var props = _extends({}, this.getContext(), this.props);
    var _extractCloudinaryPro = extractCloudinaryProps(props), children = _extractCloudinaryPro.children, cloudinaryProps = _extractCloudinaryPro.cloudinaryProps, nonCloudinaryProps = _extractCloudinaryPro.nonCloudinaryProps, cloudinaryReactProps = _extractCloudinaryPro.cloudinaryReactProps;
    return import_react.default.createElement(CloudinaryContextType.Provider, {
      value: cloudinaryProps
    }, cloudinaryReactProps.includeOwnBody ? children : import_react.default.createElement("div", nonCloudinaryProps, children));
  };
  return CloudinaryContext2;
}(CloudinaryComponent);
CloudinaryContext.propTypes = _extends({}, CloudinaryComponent.propTypes, {
  includeOwnBody: import_prop_types.default.bool
});
CloudinaryContext.defaultProps = {
  includeOwnBody: false
};
var _excluded$1 = ["children", "innerRef"];
var RESPONSIVE_OVERRIDE_WARNING = `
Warning: passing a number value for width cancels the 'responsive' prop's effect on the image transformation.
The 'responsive' prop affects the image transformation only when width === 'auto'.
Passing 'width="auto" responsive' will affect the actual image width that is fetched from Cloudinary.
The 'responsive' prop causes the Image component to request an image which width is equal to the width of it's container.
When passing 'width="auto" responsive', you can set the <img> element width by passing a 'style' prop`.trim();
var Image = function(_CloudinaryComponent) {
  _inheritsLoose(Image2, _CloudinaryComponent);
  function Image2(props, context) {
    var _this;
    _this = _CloudinaryComponent.call(this, props, context) || this;
    _this.isResponsive = function() {
      var _this$getExtendedProp = _this.getExtendedProps(), responsive = _this$getExtendedProp.responsive, width = _this$getExtendedProp.width;
      if (responsive && width !== "auto") {
        console.warn(RESPONSIVE_OVERRIDE_WARNING);
      }
      return responsive && _this.element && _this.element.current;
    };
    _this.getOptions = function() {
      var extendedProps = _this.getExtendedProps();
      var _extendedProps$getTra = _extends({}, extendedProps, getTransformation(extendedProps)), options = _objectWithoutPropertiesLoose(_extendedProps$getTra, _excluded$1);
      if (!_this.shouldLazyLoad()) {
        delete options.loading;
      }
      return options;
    };
    _this.getAttributes = function(additionalOptions) {
      if (additionalOptions === void 0) {
        additionalOptions = {};
      }
      var _additionalOptions = additionalOptions, placeholder = _additionalOptions.placeholder;
      var options = extractCloudinaryProps(_extends({}, _this.getOptions(), additionalOptions));
      var cloudinaryProps = options.cloudinaryProps, nonCloudinaryProps = options.nonCloudinaryProps, cloudinaryReactProps = options.cloudinaryReactProps;
      var imageTag = getImageTag(_extends({}, cloudinaryProps, cloudinaryReactProps));
      var cloudinaryAttributes = import_cloudinary_core.Util.withCamelCaseKeys(imageTag.attributes());
      var attributes = _extends({}, cloudinaryAttributes, nonCloudinaryProps);
      if (attributes.dataSrc) {
        attributes["data-src"] = attributes.dataSrc;
      }
      if (placeholder && attributes.id) {
        attributes.id += "-cld-placeholder";
      }
      if (_this.shouldLazyLoad()) {
        attributes["data-src"] = attributes.dataSrc || attributes.src;
        delete attributes.src;
      }
      CLOUDINARY_REACT_PROPS.forEach(function(attr) {
        delete attributes[attr];
      });
      return attributes;
    };
    _this.update = function() {
      if (_this.shouldLazyLoad()) {
        import_cloudinary_core.Util.detectIntersection(_this.element.current, _this.onIntersect);
      } else if (_this.isResponsive()) {
        var options = _this.getOptions();
        var placeholder = _this.getPlaceholderType();
        if (placeholder) {
          var removePlaceholderListener = makeElementResponsive(_this.placeholderElement.current, _extends({}, options, {
            placeholder
          }));
          _this.listenerRemovers.push(removePlaceholderListener);
        }
        var removeImgListener = makeElementResponsive(_this.element.current, options);
        _this.listenerRemovers.push(removeImgListener);
      }
    };
    _this.shouldLazyLoad = function() {
      var _this$getExtendedProp2 = _this.getExtendedProps(), loading = _this$getExtendedProp2.loading;
      var isInView = _this.state.isInView;
      return !isInView && (loading === "lazy" || loading === "auto");
    };
    _this.handleImageLoaded = function() {
      var onLoad = _this.props.onLoad;
      _this.setState({
        isLoaded: true
      }, function() {
        if (onLoad) {
          onLoad();
        }
      });
    };
    _this.renderPlaceholder = function(placeholder, attributes) {
      attributes.style = _extends({}, attributes.style || {}, {
        opacity: 0,
        position: "absolute"
      });
      attributes.onLoad = _this.handleImageLoaded;
      var placeholderWrapperStyle = {
        display: "inline"
      };
      var placeholderAttributes = _this.getAttributes({
        placeholder
      });
      return import_react.default.createElement(import_react.Fragment, null, _this.renderImage(attributes), import_react.default.createElement("div", {
        style: placeholderWrapperStyle
      }, import_react.default.createElement("img", _extends({
        ref: _this.placeholderElement
      }, placeholderAttributes))));
    };
    _this.renderImage = function(attributes) {
      return import_react.default.createElement("img", _extends({
        ref: _this.attachRef
      }, attributes));
    };
    _this.getPlaceholderType = function() {
      var _this$getExtendedProp3 = _this.getExtendedProps(), children = _this$getExtendedProp3.children;
      var placeholder = getChildPlaceholder(children);
      return placeholder ? placeholder.props.type : null;
    };
    _this.placeholderElement = (0, import_react.createRef)();
    _this.state = {
      isLoaded: false
    };
    _this.listenerRemovers = [];
    return _this;
  }
  var _proto = Image2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.update();
  };
  _proto.componentDidUpdate = function componentDidUpdate() {
    this.update();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.listenerRemovers.forEach(function(removeListener) {
      return removeListener();
    });
  };
  _proto.render = function render() {
    var isLoaded = this.state.isLoaded;
    var attributes = this.getAttributes();
    var placeholder = this.getPlaceholderType();
    if (!isLoaded && placeholder) {
      return this.renderPlaceholder(placeholder, attributes);
    }
    return this.renderImage(attributes);
  };
  return Image2;
}(CloudinaryComponent);
Image.defaultProps = {};
Image.propTypes = CloudinaryComponent.propTypes;
Image.propTypes.responsive = import_prop_types.default.bool;
Image.propTypes.loading = import_prop_types.default.string;
Image.propTypes.accessibility = import_prop_types.default.string;
var Transformation = function(_CloudinaryComponent) {
  _inheritsLoose(Transformation2, _CloudinaryComponent);
  function Transformation2() {
    return _CloudinaryComponent.apply(this, arguments) || this;
  }
  var _proto = Transformation2.prototype;
  _proto.render = function render() {
    return null;
  };
  return Transformation2;
}(CloudinaryComponent);
Transformation.propTypes = CloudinaryComponent.propTypes;
Transformation.defaultProps = {};
Transformation.exposesProps = true;
Transformation.displayName = "CloudinaryTransformation";
var _excluded = ["innerRef", "publicId", "fallback", "children", "sourceTypes", "sourceTransformation", "sources"];
var Video = function(_CloudinaryComponent) {
  _inheritsLoose(Video2, _CloudinaryComponent);
  function Video2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _CloudinaryComponent.call.apply(_CloudinaryComponent, [this].concat(args)) || this;
    _this.mimeType = "video";
    _this.mimeSubTypes = VIDEO_MIME_TYPES;
    _this.getMergedProps = function() {
      return _extends({}, _this.getContext(), _this.props);
    };
    _this.generateVideoUrl = function(cld, publicId, childTransformations, sourceTransformations, sourceType) {
      var urlOptions = import_cloudinary_core.Util.withSnakeCaseKeys(import_cloudinary_core.Util.defaults({}, sourceTransformations, childTransformations, {
        resource_type: "video",
        format: sourceType
      }));
      return cld.url(publicId, urlOptions);
    };
    _this.generateUsingSourceTypes = function(cld, publicId, childTransformations, sourceTransformations, sourceTypes) {
      return sourceTypes.map(function(sourceType) {
        return _this.toSourceTag(cld, publicId, childTransformations, sourceTransformations[sourceType] || {}, sourceType, _this.buildMimeType(sourceType));
      });
    };
    _this.generateUsingSources = function(cld, publicId, childTransformations, sources) {
      return sources.map(function(_ref) {
        var _ref$transformations = _ref.transformations, transformations = _ref$transformations === void 0 ? {} : _ref$transformations, type = _ref.type, codecs = _ref.codecs;
        return _this.toSourceTag(cld, publicId, childTransformations, transformations, type, _this.buildMimeType(type, codecs));
      });
    };
    _this.toSourceTag = function(cld, publicId, childTransformations, transformations, sourceType, mimeType) {
      var src = _this.generateVideoUrl(cld, publicId, childTransformations, transformations, sourceType);
      return import_react.default.createElement("source", {
        key: src + mimeType,
        src,
        type: mimeType
      });
    };
    _this.buildMimeType = function(type, codecs) {
      var mimeType = _this.mimeType + "/" + (_this.mimeSubTypes[type] || type);
      if (!import_cloudinary_core.Util.isEmpty(codecs)) {
        mimeType += "; codecs=" + (import_cloudinary_core.Util.isArray(codecs) ? codecs.join(", ") : codecs);
      }
      return mimeType;
    };
    _this.getVideoTagProps = function() {
      var _this$getMergedProps = _this.getMergedProps(), publicId = _this$getMergedProps.publicId, children = _this$getMergedProps.children, sourceTypes = _this$getMergedProps.sourceTypes, _this$getMergedProps$ = _this$getMergedProps.sourceTransformation, sourceTransformation = _this$getMergedProps$ === void 0 ? {} : _this$getMergedProps$, sources = _this$getMergedProps.sources, options = _objectWithoutPropertiesLoose(_this$getMergedProps, _excluded);
      options = normalizeOptions(options, {});
      var _extractCloudinaryPro = extractCloudinaryProps(options), cloudinaryProps = _extractCloudinaryPro.cloudinaryProps, cloudinaryReactProps = _extractCloudinaryPro.cloudinaryReactProps, nonCloudinaryProps = _extractCloudinaryPro.nonCloudinaryProps;
      options = _extends({}, cloudinaryProps, cloudinaryReactProps);
      var snakeCaseOptions = import_cloudinary_core.Util.withSnakeCaseKeys(options);
      var cld = import_cloudinary_core.Cloudinary["new"](snakeCaseOptions);
      var tagAttributes = cld.videoTag(publicId, options).attributes();
      tagAttributes = _extends({}, import_cloudinary_core.Util.withCamelCaseKeys(tagAttributes), nonCloudinaryProps);
      var childTransformations = getTransformation(_extends({}, options, {
        children
      }));
      var sourceElements = null;
      if (import_cloudinary_core.Util.isArray(sources) && !import_cloudinary_core.Util.isEmpty(sources)) {
        sourceElements = _this.generateUsingSources(cld, publicId, childTransformations, sources);
      } else if (import_cloudinary_core.Util.isArray(sourceTypes)) {
        sourceElements = _this.generateUsingSourceTypes(cld, publicId, childTransformations, sourceTransformation, sourceTypes);
      } else {
        tagAttributes.src = _this.generateVideoUrl(cld, publicId, childTransformations, sourceTransformation[sourceTypes] || {}, sourceTypes);
      }
      return {
        sources: sourceElements,
        tagAttributes
      };
    };
    _this.reloadVideo = function() {
      if (_this.element && _this.element.current) {
        _this.element.current.load();
      }
    };
    return _this;
  }
  var _proto = Video2.prototype;
  _proto.componentDidUpdate = function componentDidUpdate() {
    this.reloadVideo();
  };
  _proto.render = function render() {
    var _this$props = this.props, fallback = _this$props.fallback, children = _this$props.children;
    var _this$getVideoTagProp = this.getVideoTagProps(), tagAttributes = _this$getVideoTagProp.tagAttributes, sources = _this$getVideoTagProp.sources;
    return import_react.default.createElement("video", _extends({
      ref: this.attachRef
    }, tagAttributes), sources, fallback, children);
  };
  return Video2;
}(CloudinaryComponent);
Video.propTypes = {
  publicId: import_prop_types.default.string,
  sources: import_prop_types.default.arrayOf(import_prop_types.default.shape({
    type: import_prop_types.default.string,
    codecs: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.arrayOf(import_prop_types.default.string)]),
    transformations: import_prop_types.default.object
  }))
};
Video.defaultProps = {
  sourceTypes: import_cloudinary_core.Cloudinary.DEFAULT_VIDEO_PARAMS.source_types
};
var Audio = function(_Video) {
  _inheritsLoose(Audio2, _Video);
  function Audio2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _Video.call.apply(_Video, [this].concat(args)) || this;
    _this.mimeType = "audio";
    _this.mimeSubTypes = AUDIO_MIME_TYPES;
    return _this;
  }
  var _proto = Audio2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, innerRef = _this$props.innerRef, fallback = _this$props.fallback, children = _this$props.children;
    var _this$getVideoTagProp = this.getVideoTagProps(), tagAttributes = _this$getVideoTagProp.tagAttributes, sources = _this$getVideoTagProp.sources;
    delete tagAttributes.poster;
    return import_react.default.createElement("audio", _extends({
      ref: innerRef
    }, tagAttributes), sources, fallback, children);
  };
  return Audio2;
}(Video);
Audio.propTypes = {
  publicId: import_prop_types.default.string
};
Audio.defaultProps = {
  sourceTypes: ["aac", "mp3", "ogg"]
};
var Placeholder = function Placeholder2(_ref) {
  return null;
};
Placeholder.propTypes = {
  type: import_prop_types.default.string
};
Placeholder.defaultProps = {
  type: "blur"
};
Placeholder.displayName = "CloudinaryPlaceholder";
export {
  Audio,
  CloudinaryContext,
  Image,
  Placeholder,
  Transformation,
  Video
};
//# sourceMappingURL=cloudinary-react.js.map
